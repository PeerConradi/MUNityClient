@using MUNityClient.Models.Simulation;
@using System.Linq; 

@inject MUNityClient.Services.SimulationService simulationService;
@inject NavigationManager navigationManager;
@* Dies ist eine Teilnehmendenansicht an dieser Stelle werden den Nutzern Rollen zugewiesen bzw. können sich diese ihre Rollen auswählen. *@
@if (_simulation != null)
{
    <h3>@_simulation.Name</h3>

    <div class="row">
        <div class="col-8">
            <div class="card">
                <div class="card-header">
                    Gremium/Lobby
                </div>
                <div class="card-body">
                    @* Die Tabelle könnte auch noch eine Spalte für die Flagge bekommen, das hat aber wirklich keine Prio. *@
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Name</th>
                                <th scope="col">Rolle</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (_simulation.Users != null && _auth != null)
                            {
                                int index = 0;
                                @foreach (var user in _simulation.Users)
                                {
                                    @if (user.SimulationUserId != _auth.SimulationUserId)
                                    {
                                        @* Das ist nicht der verbundene Benutzer also eine Normale Zeile ausgeben. *@
                                        <tr>
                                            <th>@index</th>
                                            <td>@user.DisplayName</td>
                                            <td>@(_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)?.Name ?? "Keine Rolle")</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        @* Das ist der Benutzer der Verbunden ist selbst. Deshalb kann er/sie eine Rolle
                    auswählen *@
                                        <tr class="table-primary">
                                            <th>@index</th>
                                            <th>@user.DisplayName</th>
                                            <td>
                                                @if (_simulation.Roles != null)
                                                {
                                                    @if (_auth.CanSelectRole)
                                                    {
                                                        <select class="form-control" @bind="SelectedRole">
                                                            <option value="-2">Keine Rolle</option>
                                                            @foreach (var role in _simulation.Roles)
                                                            {
                                                                <option value="@role.SimulationRoleId">@role.Name</option>
                                                            }
                                                        </select>
                                                    }
                                                    else
                                                    {
                                                        <p>Sie fürfen sich keine Rolle zuweisen.</p>
                                                    }

                                                }
                                                else
                                                {
                                                    <p>Rollen werden geladen.</p>
                                                }
                                            </td>
                                        </tr>
                                    }
                                    index++;
                                }
                            }
                        </tbody>
                    </table>
                </div>
                @*
                    Rollenerstellung vorerst deaktiviert. Arbeite halt mit den Presets...
                <div class="card-footer">
                    @if (Auth != null && Auth.CanCreateRole)
                    {
                        <button class="btn btn-block btn-success">Rolle hinzufügen</button>
                    }
                </div>
                *@
            </div>
        </div>

        <div class="col-4">
            <div class="card">
                <div class="card-header">
                    Einstellungen
                </div>
                <div class="card-body">
                    @if (_presets != null && _presets.Any() && _auth.CanCreateRole)
                    {
                        <div class="form-group">
                            <label>Vorlage</label>
                            <select @bind="SelectedPresetId" class="form-control">
                                <option value="null">-</option>
                                @foreach (var preset in _presets)
                                {
                                    <option value="@preset.Id">@preset.Name</option>
                                }
                            </select>
                            @if (SelectedPreset != null)
                            {
                                <small class="text-danger">Achtung die Vorlage überschreibt einen Großteil der Einstellungen</small>
                                <br />
                                <small>Staaten: </small>
                                <small>@string.Join(", ", SelectedPreset.Roles.Select(n => n.Name))</small>
                            }
                        </div>
                        @if (SelectedPreset != null)
                        {
                            <div class="form-group">
                                <button class="btn btn-block btn-primary" @onclick="() => ActivatePreset()">Vorlage Anwenden</button>
                            </div>
                        }
                    }

                </div>
                <div class="card-footer">
                    @if (_auth != null && _auth.CanCreateRole)
                    {
                        <button class="btn btn-block btn-primary" @onclick="() => StartPhase()">Starten</button>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <p>Lobby wird geladen.</p>
}


@code {
    [Parameter]
    public int? Id { get; set; }

    private Models.Simulation.SimulationAuth _auth { get; set; }

    private Models.Simulation.Simulation _simulation { get; set; }

    private IEnumerable<Models.Simulation.SimulationPreset> _presets { get; set; }
    private Models.Simulation.SimulationPreset SelectedPreset { get; set; }
    private string SelectedPresetId
    {
        get => SelectedPreset?.Id ?? "";
        set => SelectedPreset = _presets.FirstOrDefault(n => n.Id == value);
    }

    private int SelectedRole
    {
        get => this._simulation.Users.FirstOrDefault(n => n.SimulationUserId == _auth.SimulationUserId).RoleId;
        set
        {
            SelectRole(value);
        }
    }

    private async Task StartPhase()
    {
        var response = await this.simulationService.SetPhase(this._simulation.SimulationId, (int)Models.Simulation.Simulation.GamePhases.Online);
    }

    private async Task ActivatePreset()
    {
        if (this.Id != null && this.SelectedPresetId != null)
        {

            await this.simulationService.ApplyPreset(Id.Value, SelectedPresetId);
            this._simulation.Roles = await this.simulationService.GetRoles(Id.Value);
        }
    }

    protected async override Task OnInitializedAsync()
    {
        if (Id != null)
        {
            var socket = await this.simulationService.Subscribe(Id.Value);
            AppendEvents(socket);
            this._simulation = await this.simulationService.GetSimulation(Id.Value);
            this._auth = await this.simulationService.GetMyAuth(Id.Value);
            this._presets = await this.simulationService.GetPresets();
        }

        //return base.OnInitializedAsync();
    }

    private void AppendEvents(MUNityClient.Services.SocketHandlers.SimulationSocketHandler handler)
    {
        handler.UserDisconnected += UserDisconnected;
        handler.UserConnected += UserConnected;
        handler.UserRoleChanged += UserRoleChanged;
        handler.PhaseChanged += PhaseChanged;
    }



    private void UserDisconnected(int sender, SimulationUser user)
    {
        if (this._simulation == null) return;

        this._simulation.Users.RemoveAll(n => n.SimulationUserId == user.SimulationUserId);
        this.StateHasChanged();
    }

    private void UserConnected(int sender, SimulationUser user)
    {
        if (this._simulation == null) return;

        // Nutzer bereits Verbunden, Wohl einen Disconnect verpasst.
        if (this._simulation.Users.Any(n => n.SimulationUserId == user.SimulationUserId))
            return;

        this._simulation.Users.Add(user);
        this.StateHasChanged();
    }

    private void UserRoleChanged(int sender, int userId, int roleId)
    {
        if (_simulation == null) return;
        var user = this._simulation.Users.FirstOrDefault(n => n.SimulationUserId == userId);
        if (user != null)
        {
            user.RoleId = roleId;
            this.StateHasChanged();
        }
    }

    private void PhaseChanged(int sender, Models.Simulation.Simulation.GamePhases phase)
    {
        if (phase == Models.Simulation.Simulation.GamePhases.Online)
        {
            navigationManager.NavigateTo($"/sim/run/{_simulation.SimulationId}");
        }
    }

    private async Task SelectRole(int roleId)
    {
        await this.simulationService.PickRole(this._simulation.SimulationId, roleId);
    }
}
