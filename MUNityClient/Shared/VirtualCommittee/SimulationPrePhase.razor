@using MUNityClient.Models.Simulation;
@using System.Linq; 

@inject MUNityClient.Services.SimulationService simulationService;
@inject NavigationManager navigationManager;
@* Dies ist eine Teilnehmendenansicht an dieser Stelle werden den Nutzern Rollen zugewiesen bzw. können sich diese ihre Rollen auswählen. *@
@if (_simulation != null)
{
    <div class="row col-12 m-0 p-0">
        <div class="col">
            <div class="card">
                <div class="card-header">
                    @_simulation.Name
                </div>
                <div class="card-body p-0">
                    @if (_auth.CanCreateRole)
                    {
                        <AdminUserList SimulationId="_simulation.SimulationId" SocketHandler="_socket"></AdminUserList>
                    }
                    else
                    {
                        <DefaultUserList SimulationId="_simulation.SimulationId" SocketHandler="_socket"></DefaultUserList>
                    }
                </div>
                @*
                    Rollenerstellung vorerst deaktiviert. Arbeite halt mit den Presets...
                <div class="card-footer">
                    @if (Auth != null && Auth.CanCreateRole)
                    {
                        <button class="btn btn-block btn-success">Rolle hinzufügen</button>
                    }
                </div>
                *@
            </div>
        </div>

        @if (_auth.CanCreateRole)
        {
            <div class="col-4">
                <div class="card">
                    <div class="card-header">
                        Einstellungen
                    </div>
                    <div class="card-body">
                        @if (_presets != null && _presets.Any() && _auth.CanCreateRole)
                        {
                            <div class="form-group">
                                <label>Vorlage</label>
                                <select @bind="SelectedPresetId" class="form-control">
                                    <option value="null">-</option>
                                    @foreach (var preset in _presets)
                                    {
                                        <option value="@preset.Id">@preset.Name</option>
                                    }
                                </select>
                                @if (SelectedPreset != null)
                                {
                                    <small class="text-danger">Achtung die Vorlage überschreibt einen Großteil der Einstellungen</small>
                                    <br />
                                    <small>Staaten: </small>
                                    <small>@string.Join(", ", SelectedPreset.Roles.Select(n => n.Name))</small>
                                }
                            </div>
                            @if (SelectedPreset != null)
                            {
                                <div class="form-group">
                                    <button class="btn btn-block btn-primary" @onclick="() => ActivatePreset()">Vorlage Anwenden</button>
                                </div>
                            }
                        }

                    </div>
                    <div class="card-footer">
                        @if (_auth != null && _auth.CanCreateRole)
                        {
                            <button class="btn btn-block btn-success" @onclick="() => StartPhase()">Starten</button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="row d-flex w-100 justify-content-center mt-5">
        <div class="d-flex w-100 justify-content-center">
            <div class="spinner-border text-primary p-4" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div class="d-flex justify-content-center mt-3">
            Lobby wird geladen...
        </div>
    </div>
}


@code {
    [Parameter]
    public int? Id { get; set; }

    private MUNity.Schema.Simulation.SimulationAuthSchema _auth { get; set; }

    private Services.SocketHandlers.SimulationSocketHandler _socket;

    private MUNity.Schema.Simulation.SimulationResponse _simulation { get; set; }

    private IEnumerable<Models.Simulation.SimulationPreset> _presets { get; set; }
    private Models.Simulation.SimulationPreset SelectedPreset { get; set; }
    private string SelectedPresetId
    {
        get => SelectedPreset?.Id ?? "";
        set => SelectedPreset = _presets.FirstOrDefault(n => n.Id == value);
    }

    private int SelectedRole
    {
        get => this._simulation.Users.FirstOrDefault(n => n.SimulationUserId == _auth.SimulationUserId).RoleId;
        set
        {
            SelectRole(value);
        }
    }

    private async Task StartPhase()
    {
        var response = await this.simulationService.SetPhase(this._simulation.SimulationId, (int)MUNity.Schema.Simulation.SimulationEnums.GamePhases.Online);
    }

    private async Task ActivatePreset()
    {
        if (this.Id != null && this.SelectedPresetId != null)
        {

            await this.simulationService.ApplyPreset(Id.Value, SelectedPresetId);
            this._simulation.Roles = await this.simulationService.GetRoles(Id.Value);
        }
    }

    protected async override Task OnInitializedAsync()
    {
        if (Id != null)
        {
            _socket = await this.simulationService.Subscribe(Id.Value);
            AppendEvents(_socket);
            this._simulation = await this.simulationService.GetSimulation(Id.Value);
            this._auth = await this.simulationService.GetMyAuth(Id.Value);
            this._presets = await this.simulationService.GetPresets();
        }

        //return base.OnInitializedAsync();
    }

    private void AppendEvents(MUNityClient.Services.SocketHandlers.SimulationSocketHandler handler)
    {
        handler.PhaseChanged += PhaseChanged;
    }

    private void PhaseChanged(int sender, MUNity.Schema.Simulation.SimulationEnums.GamePhases phase)
    {
        if (phase == MUNity.Schema.Simulation.SimulationEnums.GamePhases.Online)
        {
            navigationManager.NavigateTo($"/sim/run/{_simulation.SimulationId}");
        }
    }

    private async Task SelectRole(int roleId)
    {
        await this.simulationService.PickRole(this._simulation.SimulationId, roleId);
    }
}
