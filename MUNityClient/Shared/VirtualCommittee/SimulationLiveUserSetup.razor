@* Ansicht eines Benutzers in dem virtuellem Gremium aus der Sicht eines Admins *@
@inject MUNityClient.Services.SimulationService simulationService;


@if (User != null)
{
    <div class="card @((User.IsOnline) ? "border-success" : "border-danger")" style="width: 18rem">
        <div class="card-header text-white @((User.IsOnline) ? "bg-success" : "bg-danger")">
            @if (Role != null)
            {
                <p>@Role.Name</p>
            }
            else
            {
                <p>Rolle nicht gefunden. (@User.RoleId)</p>
            }
            
        </div>
        <div class="card-body">
            <p class="card-title">@User.DisplayName</p>
        </div>
        @if (_currentPetition != null)
        {
            <div class="card-footer">
                <p>@_currentPetition.PetitionType</p>
                <p>@_currentPetition.PetitionDate.ToString()</p>
                <p>@_currentPetition.Text</p>
                @* Bisher machen die beiden Schaltflächen das gleiche und können daher mit einer "Bestätigen" Schaltfläche ausgetauscht werden.
                    Diese sollte dann AcceptCurrentPetition() aufrufen. *@
                <button class="btn btn-success" @onclick="() => AcceptCurrentPetition()">Annehmen</button>
                <button class="btn btn-danger" @onclick="() => DenyCurrentPetition()">Löschen</button>
            </div>
        }
    </div>

    @* TODO: Buttons zum einsehen der Kennung und des Passworts. ggf. weitere Funktionsbuttons in Zukunft wie Ändern von Rollen/Anzeigenamen etc. *@
}
else
{
    <p>Benutzer wird geladen</p>
}

@code {
    [Parameter]
    public MUNity.Schema.Simulation.SimulationUserSetup User { get; set; }

    [Parameter]
    public MUNity.Schema.Simulation.SimulationRoleItem Role { get; set; }

    [Parameter]
    public MUNityClient.Services.SocketHandlers.SimulationSocketHandler SocketHandler { get; set; }

    private MUNity.Schema.Simulation.Petition _currentPetition;

    protected override Task OnInitializedAsync()
    {
        if (SocketHandler != null)
        {
            SocketHandler.UserPetition += OnUserPetition;
            SocketHandler.UserPetitionAccpted += OnUserPetitionAccepted;
            SocketHandler.UserPetitionDeleted += OnUserPetitionDeleted;
        }
        return base.OnInitializedAsync();
    }

    private void OnUserPetition(MUNity.Schema.Simulation.Petition petition)
    {
        if (petition.PetitionUserId == this.User.SimulationUserId)
        {
            this._currentPetition = petition;
            this.StateHasChanged();
        }
    }

    private void OnUserPetitionAccepted(MUNity.Schema.Simulation.Petition petition)
    {
        if (_currentPetition == null) return;
        if (_currentPetition.PetitionId == petition.PetitionId)
        {
            _currentPetition = null;
            this.StateHasChanged();
        }

    }

    private void OnUserPetitionDeleted(MUNity.Schema.Simulation.Petition petition)
    {
        if (_currentPetition == null) return;
        if (_currentPetition.PetitionId == petition.PetitionId)
        {
            _currentPetition = null;
            this.StateHasChanged();
        }
    }

    private async Task DenyCurrentPetition()
    {
        if (this._currentPetition == null) return;
        await simulationService.DeletePetition(this._currentPetition);
    }

    private async Task AcceptCurrentPetition()
    {
        if (this._currentPetition == null) return;
        await simulationService.AcceptPetition(this._currentPetition);
    }
}
