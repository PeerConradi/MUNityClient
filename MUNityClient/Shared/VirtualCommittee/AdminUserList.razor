@inject Services.SimulationService _simulationService;

@if (Users != null)
{
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>Nutzername</th>
                    <th>Online</th>
                    <th>PublicId</th>
                    <th>Rolle</th>
                    <th>
                        <div type="button" @onclick="() => showPasswords = !showPasswords">
                            @if (showPasswords)
                            {
                                <i class="fas fa-eye mr-2"></i>
                            }
                            else
                            {
                                <i class="fas fa-eye-slash mr-2"></i>
                            }
                            Passwort
                        </div>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Users)
                {
                    if (user != null)
                    {
                        <UserListItemAdmin User="user" SimulationId="SimulationId" Roles="Roles" PasswordShown="@showPasswords"></UserListItemAdmin>
                    }
                }
            </tbody>
        </table>
        <button class="btn btn-dark-green btn-block" @onclick="() => NewUser()"><i class="fas fa-plus mr-2"></i>Neuer
            Benutzer</button>
    </div>
}
else
{
    <div class="row d-flex w-100 justify-content-center my-5">
        <div class="d-flex w-100 justify-content-center">
            <div class="spinner-border text-primary p-4" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div class="d-flex justify-content-center mt-3">
            Benutzer werden geladen...
        </div>
    </div>
}

@code {
    [Parameter]
    public int SimulationId { get; set; }

    [Parameter]
    public Services.SocketHandlers.SimulationSocketHandler SocketHandler { get; set; }

    private Boolean showPasswords = false;

    public List<MUNity.Schema.Simulation.SimulationUserSetup> Users { get; set; }

    public List<MUNity.Schema.Simulation.SimulationRoleItem> Roles { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SocketHandler.UserConnected += OnUserConnected;
        SocketHandler.UserDisconnected += OnUserDisconnected;
        this.Users = await _simulationService.GetUserSetups(this.SimulationId);
        this.Roles = await _simulationService.GetRoles(this.SimulationId);
        if (SocketHandler != null)
        {
            SocketHandler.RolesChanged += OnRolesChanged;
        }
    }

    private void OnRolesChanged(int sender, IEnumerable<MUNity.Schema.Simulation.SimulationRoleItem> roles)
    {
        this.Roles = roles.ToList();
        this.StateHasChanged();
    }

    private void OnUserConnected(int sender, MUNity.Schema.Simulation.SimulationUserItem usr)
    {
        var user = Users.FirstOrDefault(n => n.SimulationUserId == usr.SimulationUserId);
        if (user != null)
        {
            user.IsOnline = true;

            if (!string.IsNullOrEmpty(usr.DisplayName) && usr.DisplayName != user.DisplayName)
                user.DisplayName = usr.DisplayName;

            StateHasChanged();
        }
    }

    private void OnUserDisconnected(int sender, MUNity.Schema.Simulation.SimulationUserItem usr)
    {
        var user = Users.FirstOrDefault(n => n.SimulationUserId == usr.SimulationUserId);
        if (user != null)
        {

            user.IsOnline = false;
            this.StateHasChanged();
        }
    }

    private async Task NewUser()
    {
        var user = await _simulationService.CreateUser(SimulationId);
        if (user != null)
        {
            Users.Add(user);
        }
    }
}
