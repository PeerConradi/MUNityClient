@inject Services.SimulationService _simulationService;

@if (Users != null)
{
    <div class="card">
        <div class="card-header">Benutzer</div>
        <div class="card-body">
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Online</th>
                        <th>PublicId</th>
                        <th>Rolle</th>
                        <th>Passwort</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Users)
                    {
                        if (user != null)
                        {
                    <tr>
                        @if (user.DisplayName != null)
                        {
                            <td>@user.DisplayName</td>
                        }
                        else
                        {
                            <td>KEIN NAME</td>
                        }

                        <td>@user.IsOnline</td>
                        <td>@user.PublicId</td>
                        <td>Rollenauswahl (TODO)</td>
                        <td>@user.Password</td>
                    </tr>
                        }

                    }
                </tbody>
            </table>
        </div>
        <div class="card-footer">
            <button class="btn btn-succes btn-block" @onclick="() => NewUser()">Neuer Benutzer</button>
        </div>
    </div>
    
    
}
else
{
    <p>Benutzer werden geladen</p>
}

@code {
    [Parameter]
    public int SimulationId { get; set; }

    [Parameter]
    public Services.SocketHandlers.SimulationSocketHandler SocketHandler { get; set; }

    public List<MUNity.Schema.Simulation.SimulationUserSetup> Users { get; set; }

    public List<MUNity.Schema.Simulation.SimulationRoleItem> Roles { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SocketHandler.UserConnected += OnUserConnected;
        SocketHandler.UserDisconnected += OnUserDisconnected;
        this.Users = await _simulationService.GetUserSetups(this.SimulationId);
        this.Roles = await _simulationService.GetRoles(this.SimulationId);
    }

    private void OnUserConnected(int sender, MUNity.Schema.Simulation.SimulationUserItem usr)
    {
        var user = Users.FirstOrDefault(n => n.SimulationUserId == usr.SimulationUserId);
        if (user != null)
        {

            user.IsOnline = true;

            if (!string.IsNullOrEmpty(usr.DisplayName) && usr.DisplayName != user.DisplayName)
                user.DisplayName = usr.DisplayName;

            StateHasChanged();
        }
    }

    private void OnUserDisconnected(int sender, MUNity.Schema.Simulation.SimulationUserItem usr)
    {
        var user = Users.FirstOrDefault(n => n.SimulationUserId == usr.SimulationUserId);
        if (user != null)
        {

            user.IsOnline = false;
            this.StateHasChanged();
        }
    }

    private async Task NewUser()
    {
        var user = await _simulationService.CreateUser(SimulationId);
        if (user != null)
        {
            Users.Add(user);
        }
    }
}
