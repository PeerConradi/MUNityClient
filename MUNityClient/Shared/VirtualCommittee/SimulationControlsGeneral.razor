@* Ansicht für die Grundsätzlichen Steuerungsfunktionen. Hierzu zählen vorallem die Anträge an den Vorsitz etc.
*@

@inject Services.SimulationService simulationService;
@inject Services.ListOfSpeakerService listOfSpeakerService;

@if (Role != null)
{
    <div class="btn-group" role="group" aria-label="Button group with nested dropdown">
        <div class="btn-group dropup" role="group">
            @if (Role.RoleType == MUNity.Schema.Simulation.SimulationEnums.RoleTypes.Delegate || Role.RoleType == MUNity.Schema.Simulation.SimulationEnums.RoleTypes.Ngo)
            {
                <button id="btnGroupDrop1"
                        type="button"
                        class="btn btn-primary dropdown-toggle"
                        data-mdb-toggle="dropdown"
                        aria-expanded="false"
                        @onclick="() => { showPers = !showPers; showGO = false; }">
                    Persönlicher Antrag
                </button>
                <ul class="dropdown-menu @(showPers ? "show" : "")" aria-labelledby="btnGroupDrop1">
                    <li><a class="dropdown-item" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.PersRechtAufInformation)'>Recht auf Information</a></li>
                    <li><a class="dropdown-item" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.PersRechtAufOrdnung)'>Recht auf Wiederherstellung der Ordnung</a></li>
                    <li><a class="dropdown-item" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.PersRechtAufKlaerung)'>Recht auf Klärung eines Missverständnisses</a></li>
                </ul>

                <button id="btnGroupDrop2"
                        type="button"
                        class="btn btn-primary dropdown-toggle"
                        data-mdb-toggle="dropdown"
                        aria-expanded="true"
                        @onclick="() => { showGO = !showGO; showPers = false; }">
                    Geschäftsordnungsantrag
                </button>
                <ul class="dropdown-menu @(showGO ? "show" : "")" aria-labelledby="btnGroupDrop2">
                    <li><a class="dropdown-item" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOMuendlicheAbstimmung)'>mündliche Abstimmung</a></li>
                    <li><a class="dropdown-item" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOInformelleSitzung)'>Informelle Sitzung</a></li>

                    @* Funktionen nur für Delegierte *@
                    @if (Role.RoleType == MUNity.Schema.Simulation.SimulationEnums.RoleTypes.Delegate)
                    {
                        <li><a class="dropdown-item" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GORevision)'>Revision einer Entscheidung des Vorsitzes</a></li>
                        <li><a class="dropdown-item" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GONeuTagesordnungspunkt)'>Aufnahme eines neuen Tagesordnungspunktes</a></li>
                        <li><a class="dropdown-item" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOZurueckResolutionsentwurf)'>Zurückschicken eines Resolutionsentwurfes</a></li>
                        <li><a class="dropdown-item" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOVertagung)'>Vertagung eines Tagesordnungspunktes</a></li>
                        <li><a class="dropdown-item" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GORueckAllgDebatte)'>Rückkehr zur Allgemeinen Debatte</a></li>
                        <li><a class="dropdown-item" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOEndeDebatte)'>Ende der aktuellen Debatte</a></li>
                        <li><a class="dropdown-item" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOVorgezogenAbstReso)'>Vorgezogene Abstimmung über den Resolutionsentwurf als Ganzes</a></li>
                        <li><a class="dropdown-item" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOAbschlussRedeliste)'>Abschluss oder Wiedereröffnung der Redeliste</a></li>
                        <li><a class="dropdown-item" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOAendereRedezeit)'>Änderung der Redezeit</a></li>
                        <li><a class="dropdown-item" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOGastredner)'>Anhörung eines Gastredners</a></li>
                    }
                </ul>
            }

        </div>
    </div>

    if (Role.RoleType == MUNity.Schema.Simulation.SimulationEnums.RoleTypes.Chairman)
    {
        <button class="btn btn-primary" @onclick="() => BackToLobby()">Zurück in die Lobby</button>
    }
}

@* Kann ggf. in einen eigenen Reiter für die Redelistensteuerung ausgelagert werden! *@
@if (!string.IsNullOrEmpty(SpeakerlistId) && SpeakerlistId != "_loading_")
{
    <button class="btn btn-info" @onclick="AddMeToListOfSpeakers">Auf die Redeliste</button>
    <button class="btn btn-info" @onclick="AddMeToListOfQuestions">Auf Fragen und Kurzbemerkungen</button>

}

@code {
    private bool showPers { get; set; } = false;

    public bool showGO { get; set; } = false;

    [Parameter]
    public MUNity.Schema.Simulation.SimulationRoleItem Role { get; set; }

    [Parameter]
    public string SpeakerlistId { get; set; }

    [Parameter]
    public int SimulationId { get; set; }

    [Parameter]
    public MUNity.Schema.Simulation.IUserItem Me { get; set; }

    private async Task MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes type)
    {
        if (SimulationId == 0) return;
        var petition = new MUNity.Schema.Simulation.Petition();
        petition.SimulationId = SimulationId;
        petition.Text = "";
        petition.PetitionType = type;
        await this.simulationService.MakePetition(petition);
        showPers = false;
        showGO = false;
    }

    private void AddMeToListOfSpeakers()
    {
        if (Role != null)
        {
            listOfSpeakerService.AddSpeakerToList(SpeakerlistId, Role.Name, Role.Iso);
            return;
        }
        else
        {
            if (Me != null)
            {
                listOfSpeakerService.AddSpeakerToList(SpeakerlistId, Me.DisplayName, "");
            }
        }
    }

    private void AddMeToListOfQuestions()
    {
        if (Role != null)
        {
            listOfSpeakerService.AddQuestionToList(SpeakerlistId, Role.Name, Role.Iso);
            return;
        }
        else
        {
            if (Me != null)
            {
                listOfSpeakerService.AddQuestionToList(SpeakerlistId, Me.DisplayName, "");
            }
        }
    }

    private async Task BackToLobby()
    {
        var response = await this.simulationService.SetPhase(this.SimulationId, (int)MUNity.Schema.Simulation.SimulationEnums.GamePhases.Lobby);
    }
}
