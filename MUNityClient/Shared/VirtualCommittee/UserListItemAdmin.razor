@inject Services.SimulationService simulationService;
@inject IJSRuntime JS;

<tr class="table-row align-items-center">
    @if (User.DisplayName != null)
    {
        <td>@User.DisplayName</td>
    }
    else
    {
        <td>KEIN NAME</td>
    }

    <td class="text-center"><i class="fa fa-circle @(User.IsOnline ? "text-success" : "text-danger")" aria-hidden="true"></i></td>
    <td class="pointer" @onclick="CopyUserIDToClippboard" title="Klicken zum kopieren">@User.PublicId</td>
    @if (Roles != null)
    {
        <td>
            <select class="form-control" @bind="@this.RoleId">
                <option value="-2">Keine Rolle</option>
                @foreach (var role in Roles)
                {
                    <option value="@role.SimulationRoleId">@role.Name</option>
                }
            </select>
        </td>
    }
    else
    {
        <td>Rollen werden geladen/Keine Rollen gefunden</td>
    }
    <td class="pointer" @onclick="CopyPasswordToClippboard" title="Klicken zum kopieren">
        @if (PasswordShown)
        {
            @User.Password
        }
        else
        {
            <span>********</span>
        }

    
    </td>

    <td>
        <i class="fas fa-trash" @onclick="() => UserRemoveClicked.InvokeAsync(User.SimulationUserId)"></i>
    </td>
</tr>
@code {
    [Parameter]
    public MUNity.Schema.Simulation.SimulationUserSetup User { get; set; }

    [Parameter]
    public int SimulationId { get; set; }

    [Parameter]
    public List<MUNity.Schema.Simulation.SimulationRoleItem> Roles { get; set; }

    [Parameter]
    public Boolean PasswordShown { get; set; }

    [Parameter]
    public EventCallback<int> UserRemoveClicked { get; set; }

    private int _roleId;
    public int RoleId
    {
        get => _roleId;
        set
        {
            if (_roleId != value)
            {
                this.simulationService.SetUserRole(this.SimulationId, this.User.SimulationUserId, value);
                _roleId = value;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        this._roleId = User.RoleId;
        if (Roles == null)
        {
            this.Roles = await this.simulationService.GetRoles(SimulationId);
        }

    }

    private void CopyPasswordToClippboard(){
        JS.InvokeAsync<string>("navigator.clipboard.writeText", @User.Password);
    }
    private void CopyUserIDToClippboard(){
        JS.InvokeAsync<string>("navigator.clipboard.writeText", @User.PublicId);
    }
}

<style>
    .pointer {
        cursor: pointer;
    }
</style>