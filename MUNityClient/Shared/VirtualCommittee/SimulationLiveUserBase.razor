@* Ansicht eines Benutzers in der Liste aus der Sicht eines normalen anderen Benutzers *@

@inject MUNityClient.Services.SimulationService simulationService;

<div class="border rounded p-2">
    @if (User != null)
    {
        if (User.IsOnline)
        {
            <i class="fas fa-circle text-success mr-2" title="Nutzer is online"></i>
        }
        else
        {
            <i class="far fa-circle text-danger mr-2" title="Nutzer ist offline"></i>
        }
        @if (!string.IsNullOrEmpty(User.DisplayName))
        {
            <span>@User.DisplayName</span>
        }
        else
        {
            <span>Kein Anzeigename?</span>
        }

        @if (Role != null)
        {
            <p>@Role.Name</p>
        }
  
        @if (_currentPetition != null)
        {
<div class="card-footer">
    <p>@_currentPetition.PetitionType</p>
    <p>@_currentPetition.PetitionDate.ToString()</p>
    <p>@_currentPetition.Text</p>
    @if (User is MUNity.Schema.Simulation.SimulationUserSetup)
    {
        <button class="btn btn-success" @onclick="() => AcceptCurrentPetition()">Annehmen</button>
    }

    else if (this.IsMe || User is MUNity.Schema.Simulation.SimulationUserSetup)
    {

        <button class="btn btn-danger" @onclick="() => DenyCurrentPetition()">Löschen</button>
    }
</div>
        }
    }
    else
    {
        <div class="d-flex w-100 justify-content-center">
            <div class="spinner-border text-primary p-2" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div class="d-flex justify-content-center mt-3">
            Benutzer wird geladen...
        </div>
    }
</div>

@code {
    [Parameter]
    public MUNity.Schema.Simulation.IUserItem User { get; set; }

    [Parameter]
    public MUNity.Schema.Simulation.SimulationRoleItem Role { get; set; }

    [Parameter]
    public MUNityClient.Services.SocketHandlers.SimulationSocketHandler SocketHandler { get; set; }

    [Parameter]
    public bool IsMe { get; set; } = false;

    private MUNity.Schema.Simulation.Petition _currentPetition;

    protected override Task OnInitializedAsync()
    {
        if (SocketHandler != null)
        {
            SocketHandler.UserPetition += OnUserPetition;
            SocketHandler.UserPetitionAccpted += OnUserPetitionAccepted;
            SocketHandler.UserPetitionDeleted += OnUserPetitionDeleted;
        }
        return base.OnInitializedAsync();
    }

    private void OnUserPetition(MUNity.Schema.Simulation.Petition petition)
    {
        if (petition.PetitionUserId == this.User.SimulationUserId)
        {
            this._currentPetition = petition;
            this.StateHasChanged();
        }
    }

    private void OnUserPetitionAccepted(MUNity.Schema.Simulation.Petition petition)
    {
        if (_currentPetition == null) return;
        if (_currentPetition.PetitionId == petition.PetitionId)
        {
            _currentPetition = null;
            this.StateHasChanged();
        }

    }

    private void OnUserPetitionDeleted(MUNity.Schema.Simulation.Petition petition)
    {
        if (_currentPetition == null) return;
        if (_currentPetition.PetitionId == petition.PetitionId)
        {
            _currentPetition = null;
            this.StateHasChanged();
        }

    }

    private async Task DeleteCurrentPetition()
    {
        if (this._currentPetition == null) return;
        await simulationService.DeletePetition(this._currentPetition);
    }

    private async Task DenyCurrentPetition()
    {
        if (this._currentPetition == null) return;
        await simulationService.DeletePetition(this._currentPetition);
    }

    private async Task AcceptCurrentPetition()
    {
        if (this._currentPetition == null) return;
        await simulationService.AcceptPetition(this._currentPetition);
    }
}
