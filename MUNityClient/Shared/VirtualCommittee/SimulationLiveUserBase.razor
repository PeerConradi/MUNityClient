@* Ansicht eines Benutzers in der Liste aus der Sicht eines normalen anderen Benutzers *@

<div class="border rounded p-2">
    @if (User != null)
    {
        if (User.IsOnline)
        {
            <i class="fas fa-circle text-success mr-2" title="Nutzer is online"></i>
        }
        else
        {
            <i class="far fa-circle text-danger mr-2" title="Nutzer ist offline"></i>
        }
        @if (@User.DisplayName != null && @User.DisplayName.Length > 0)
        {
            <span>@User.DisplayName, </span>
        }

        @if (Role != null)
        {
            <p>@Role.Name</p>
        }
    }
    else
    {
        <div class="d-flex w-100 justify-content-center">
            <div class="spinner-border text-primary p-2" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div class="d-flex justify-content-center mt-3">
            Benutzer wird geladen...
        </div>
    }
</div>

@code {
    [Parameter]
    public MUNity.Schema.Simulation.SimulationUserItem User { get; set; }

    [Parameter]
    public MUNity.Schema.Simulation.SimulationRoleItem Role { get; set; }

    [Parameter]
    public MUNityClient.Services.SocketHandlers.SimulationSocketHandler SocketHandler { get; set; }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }
}
