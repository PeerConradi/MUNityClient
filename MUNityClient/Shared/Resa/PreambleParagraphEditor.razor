@using MUNityClient.Models.Resolution;
<div class="row p-0 d-flex justify-content-center">
    <div class="card my-2 px-0 col @(markedAsControlled ? "border border-success" : "")">
        <div class="row">
            @* Up/Down Buttons *@
            <div class="col-3 col-sm-2 col-md-1 justify-content-center p-0">
                <button disabled="@(Index == 0)" class="col-12 text-center custom-button h-50"
                    @onclick="() => OnMoveEvent.InvokeAsync(true)" title="Nach oben verschieben" alt="put higher"><i
                        class="fas fa-lg fa-caret-up"></i></button>
                <button disabled="@(Index == Resolution.Preamble.Paragraphs.Count - 1)"
                    class="col-12 px-0 text-center custom-button h-50" @onclick="() => OnMoveEvent.InvokeAsync(false)"
                    title="Nach unten verschieben" alt="put lower"><i class="fas fa-lg fa-caret-down"></i></button>
            </div>
            @* Input Field *@
            <div class="col p-0">
                <EditForm Model="Paragraph" class="h-100">
                    <InputTextArea @bind-Value="Paragraph.Text" disabled="@locked" placeholder="Text..."
                        class="md-textarea form-control h-100 custom-input-field px-0 p-2" />
                </EditForm>
            </div>
            @* Option Buttons *@
            <div class="col-3 col-sm-2 col-md-1 pl-0">
                <div role="button" type="button" @onclick="@(() => locked = !locked)" title="Bearbeitung sperren"
                    class="col-12 p-0 text-center px-2 py-3 custom-button text-warning" alt="lock">
                    @if (locked)
                    {
                        <i class="fas fa-lg fa-lock"></i>
                    }
                    else
                    {
                        <i class="fas fa-lg fa-lock-open"></i>
                    }
                </div>
                <div role="button" type="button" @onclick="@(() => markedAsControlled = !markedAsControlled)"
                    class="col-12 p-0 text-center px-2 py-3 custom-button" alt="mark as checked"
                    title="Als überprüft markieren">
                    @if (markedAsControlled)
                    {
                        <i class="text-success fa-lg fas fa-check"></i>
                    }
                    else
                    {
                        <i class="text-danger fa-lg fas fa-times"></i>
                    }
                </div>
                <div role="button" type="button" class="col-12 p-0 text-center px-2 py-3 custom-button text-danger"
                    alt="delete" title="Löschen" @onclick="() => OnDeleteEvent.InvokeAsync(null)">
                    <i class="fas fa-lg fa-trash"></i></div>
            </div>
        </div>

        @* Status Footer *@
        <div class="card-footer">
            <div class="row">
                <div class="col">
                    <div class="text-warning"><i class="fas fa-info-circle mr-2"></i>Der Präambel Paragraph enthält
                        keinen
                        gültigen
                        Operator.</div>
                    Aktuelle Bearbeiter:
                    <div class="badge badge-info">Nutzer 1</div>
                    <div class="badge badge-info">Nutzer 2</div>
                    Status:
                    <div class="badge badge-success">Vom Sek kontrolliert.</div>
                </div>
                <div class="col-1 d-flex align-items-center justify-content-end">
                    <div type="button" role="button" @onclick="@(() => commentsExpanded = !commentsExpanded)">
                        <i class="fas fa-comment fa-lg text-primary"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @* Comment Panel *@
    <div class="card @(commentsExpanded ? "comments-expanded m-2" : "comments") p-0">
        <EditForm Model="Paragraph" class="h-100">
            <InputTextArea @bind-Value="Paragraph.Text" disabled="@locked" placeholder="Kommentare..."
                class="md-textarea form-control h-100 custom-input-field px-0 p-2" />
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public Resolution Resolution { get; set; }

    [Parameter]
    public PreambleParagraph Paragraph { get; set; }


    [Parameter]
    //Event called when the arrow up/down buttons are called. Returns true if direction is updwards, false if downwards
    public EventCallback<Boolean> OnMoveEvent { get; set; }

    [Parameter]
    //Event called when the arrow up/down buttons are called. Returns true if direction is updwards, false if downwards
    public EventCallback OnDeleteEvent { get; set; }

    public int Index => this.Resolution?.Preamble?.Paragraphs?.IndexOf(this.Paragraph) ?? -1;

    public Boolean locked = false;
    public Boolean markedAsControlled = false;
    public Boolean commentsExpanded = false;

    public PreambleParagraphEditor()
    {

    }
}


<style>
    .card {
        transition: max-width .3s ease-in-out;
    }

    .comments {
        transition: .3s ease-in-out;
        max-width: 0%;
        overflow: hidden;
    }

    .comments-expanded {
        max-width: 25%;
        overflow: auto;
    }

    .custom-button {
        border-width: 0px;
        background-color: #00000000;
        transition: .3s;
    }

    .custom-button:hover {
        background-color: #88888826;
    }

    .custom-input-field {
        border: 0px;
        resize: none;
    }
</style>