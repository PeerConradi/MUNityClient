@using MUNityClient.Models.Resolution;

@if (Paragraph != null)
{
    <div class="col-12">
        <div class="card">
            <div class="card-header bg-gradient-dark">
                <div class="badge badge-danger">@DeleteAmendments.Count() Anträge auf Streichung</div>
                <div class="badge badge-info">@ChangeAmendments.Count() Anträge auf Änderung</div>
                <div class="badge badge-light">@MoveAmendments.Count() Anträge auf Verschiebung</div>
            </div>
            <div class="card-body">
                @Pathname
                <MUNityClient.Shared.General.MarkdownView Content="@Paragraph.Text"></MUNityClient.Shared.General.MarkdownView>

                @foreach(var activeDeleteAmendments in DeleteAmendments.Where(n => n.Activated))
                {
            <p>ABSATZ STREICHEN Eingebracht durch: @activeDeleteAmendments.SubmitterName (TODO: Text rot und durchstreichen darunter Einbringer: SubmitterName) </p>
                }
                @foreach(var activChangeAmendments in ChangeAmendments.Where(n => n.Activated))
                {
                    <p>ABSATZ ÄNDERN: (TODO: Text rot und durchstreichen, neuer Text daneben oder darunter und auch Einbringer anzeigen)</p>
                }
                @foreach(var activeMoveAmendments in MoveAmendments.Where(n => n.Activated))
                {
                    <p>Absatz verschieben: (TODO: Absatz rot und durchstreichen. Zielposition wird durch den Virtuellen Absatz angegeben!)</p>
                }
            </div>
        </div>
    </div>
}


@code {

    private OperativeParagraph _paragraph;
    [Parameter]
    public OperativeParagraph Paragraph
    {
        get => _paragraph;
        set
        {
            if (this._paragraph != null)
                this._paragraph.TextChanged -= TextChanged;
            this._paragraph = value;
            this._paragraph.TextChanged += TextChanged;
        }
    }

    [Parameter]
    public string Pathname {get; set; }

    [Parameter]
    public IEnumerable<DeleteAmendment> DeleteAmendments { get; set; }

    [Parameter]
    public IEnumerable<ChangeAmendment> ChangeAmendments { get; set; }

    [Parameter]
    public IEnumerable<MoveAmendment> MoveAmendments { get; set; }



    private void TextChanged(OperativeParagraph sender, string oldText, string newText)
    {
        StateHasChanged();
    }
}
