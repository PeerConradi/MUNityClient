@using MUNitySchema.Models.Resolution;
@using MUNity.Extensions.ResolutionExtensions;

@if (CardVisible)
{
<div class="border col-6 col-md-4 col-lg-12 py-3 text-primary">

    @if (Amendment is ChangeAmendment)
    {
        <h4 class="card-title text-center"><i class="fas fa-pen mr-2"></i>Textänderung</h4>
    } else if(Amendment is DeleteAmendment){
        <h4 class="card-title text-center"><i class="fas fa-trash mr-2"></i>Streichung</h4>
    } else if(Amendment is AddAmendment){
        <h4 class="card-title text-center"><i class="fas fa-plus-square mr-2"></i>Hinzufügen</h4>
    } else if(Amendment is MoveAmendment){
        <h4 class="card-title text-center"><i class="fas fa-arrow-left mr-2"></i>Verschieben</h4>
    }
    <p class="text-center">
        <i class="fas fa-user-edit mr-2"></i>@Amendment.SubmitterName
    </p>
    <p class="text-center">
        <i class="fas fa-calendar fa-lg mx-2"
           alt="submit date"></i>@Amendment.SubmitTime.ToString("dd.MM.yyyy")
        <i class="fas fa-clock fa-lg ml-2 mr-1" alt="submit time"></i>
        @Amendment.SubmitTime.ToString("HH:mm")
    </p>

    <div class="row d-flex justify-content-center mb-3">
       <button type="button" class="btn btn-sm m-0 btn@(Activated ? "-outline" : "")-primary" data-mdb-ripple-color="dark" @onclick="SwitchActivated">
       @if (!Activated)
       {
            <i class="fas fa-eye mr-2"></i>
             <span>Hervorheben</span>
        } else {
            <i class="fas fa-eye-slash mr-2"></i>
            <span>Hervorheben beenden</span>
        }
       </button>
    </div>

    <div class="row p-0 m-0 justify-content-between">
        <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
            <button class="btn btn-success btn-sm m-0 px-2" @onclick="ApplyAmendment">
                <i class="fas fa-check mr-2"></i>Annehmen
            </button>
            <button class="btn btn-warning btn-sm  m-0 px-2" @onclick="DenyAmendment">
                <i class="fas fa-ban mr-2"></i>Ablehnen
            </button>
        </div>
        <button class="btn btn-danger btn-sm  m-0 px-2" @onclick="DeleteMe"><i class="fas fa-trash mr-2"></i>Löschen</button>
    </div>
</div>
}


@code {
    [Parameter]
    public Resolution Resolution { get; set; }

    [Parameter]
    public AbstractAmendment Amendment { get; set; }

    [Parameter]
    public EventCallback Interaction { get; set; }


    private bool _activated;
    public bool Activated
    {
        get => _activated;
        set
        {
            this._activated = value;
            this.Amendment.Activated = value;
            if (this.Amendment is MoveAmendment moveAmendment)
            {
                var newParagraph = Resolution.OperativeSection.FindOperativeParagraph(moveAmendment.NewTargetSectionId);
                newParagraph.Visible = value;
            }
            else if (this.Amendment is AddAmendment addAmendment)
            {
                var newParagraph = Resolution.OperativeSection.FindOperativeParagraph(addAmendment.TargetSectionId);
                newParagraph.Visible = value;
            }
            Interaction.InvokeAsync(this.Amendment);
        }
    }

    public void SwitchActivated(){
        this.Activated = !this.Activated;
    }

    public bool CardVisible = true;

    public void ApplyAmendment()
    {
        this.Amendment?.Apply(this.Resolution.OperativeSection);
        Interaction.InvokeAsync(this.Amendment);
    }

    public void DenyAmendment()
    {
        this.Amendment?.Deny(this.Resolution.OperativeSection);
        Interaction.InvokeAsync(this.Amendment);
    }

    private void DeleteMe()
    {
        this.Resolution.OperativeSection.RemoveAmendment(this.Amendment);
        Interaction.InvokeAsync(this.Amendment);
    }

    protected override void OnInitialized()
    {
        if (this.Amendment != null)
        {
            this._activated = this.Amendment.Activated;
        }
        base.OnInitialized();
    }
}
