@using MUNityClient.Models.Resolution;
@inject MUNityClient.Services.ResolutionService resolutionService;

@if (Resolution.OperativeSection.Paragraphs.Contains(this.Paragraph))
{

<div class="row my-2 mx-0 p-0 d-flex justify-content-center col-12">
    <div class="card px-0 col @(Paragraph.Corrected ? "border border-success" : "")">
        <div class="row">
            @* Up/Down Buttons *@
            <div class="col-3 col-sm-2 justify-content-center pr-0">
                <button disabled="@(Index == 0)" class="col-12 p-0 text-center p-3 custom-button h-50"
                    @onclick="() => OnMoveEvent.InvokeAsync(true)" title="Nach oben verschieben" alt="put higher"><i
                        class="fas fa-lg fa-caret-up"></i></button>
                <button disabled="@(Resolution != null && Index == Resolution.OperativeSection.Paragraphs.Count - 1)"
                    class="col-12 p-0 text-center p-3 custom-button h-50"
                    @onclick="() => OnMoveEvent.InvokeAsync(false)" title="Nach unten verschieben" alt="put lower"><i
                        class="fas fa-lg fa-caret-down"></i></button>
            </div>
            @* Input Field *@
            <div class="col p-0">
                <EditForm Model="Paragraph" class="h-100">
                    <textarea value="@Paragraph.Text" @oninput="@OnInputChange" disabled="@this.Paragraph.IsLocked"
                        placeholder="Text..." class="form-control h-100 custom-input-field px-0 p-2"></textarea>
                </EditForm>

            </div>
            @* Option Buttons *@
            <div class="col-3 col-sm-2 pl-0">
                <div role="button" type="button" @onclick="@(() => this.Paragraph.IsLocked = !this.Paragraph.IsLocked)"
                    title="Bearbeitung sperren" class="col-12 p-0 text-center px-2 py-3 custom-button text-warning"
                    alt="lock">
                    @if (this.Paragraph.IsLocked)
                    {
                        <i class="fas fa-lg fa-lock"></i>
                    }
                    else
                    {
                        <i class="fas fa-lg fa-lock-open"></i>
                    }
                </div>
                <div role="button" type="button" @onclick="@(() => Paragraph.Corrected = !Paragraph.Corrected)"
                    class="col-12 p-0 text-center px-2 py-3 custom-button" alt="mark as checked"
                    title="Als überprüft markieren">
                    @if (Paragraph.Corrected)
                    {
                        <i class="text-success fa-lg fas fa-check"></i>
                    }
                    else
                    {
                        <i class="text-danger fa-lg fas fa-times"></i>
                    }
                </div>
                <div role="button" type="button" class="col-12 p-0 text-center px-2 py-3 custom-button text-danger"
                    alt="delete" title="Löschen" @onclick="() => OnDeleteEvent.InvokeAsync(null)">
                    <i class="fas fa-lg fa-trash"></i></div>
            </div>
        </div>
        @* Status Footer *@
        <div class="card-footer">
            <div class="row">
                <div class="col">
                    @if (!this.resolutionService.HasValidOperator(this.Paragraph))
                    {
                        <div class="text-warning">
                            <i class="fas fa-info-circle mr-2"></i>Der Paragraph enthält
                            keinen
                            gültigen
                            Operator.
                        </div>
                    }
                    Aktuelle Bearbeiter:
                    <div class="badge badge-info">Nutzer 1</div>
                    <div class="badge badge-info">Nutzer 2</div>
                    Status:
                    <div class="badge badge-success">Vom Sek kontrolliert.</div>
                </div>
                <div class="col-1 d-flex align-items-center justify-content-end">
                    <div type="button" role="button" @onclick="@(() => commentsExpanded = !commentsExpanded)">
                        <i class="fas fa-comment fa-lg text-primary"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @* Comment Panel *@
    <div class="card my-0 col @(commentsExpanded ? "comments-expanded ml-2" : "comments") p-0">
        <textarea placeholder="Kommentare..."
            class="form-control h-100 custom-input-field px-0 p-2 no-scrollbar"></textarea>
    </div>
</div>
}
else if (!Dismissed)
{
    <div class="alert alert-warning alert-dismissible">
        Ich bin ein Geist, aber du kannst mich
        <button class="btn btn-sm btn-secondary" @onclick="BringBack">wiederbeleben</button>.
        <button type="button" class="close" aria-label="Close" @onclick="@(() => Dismissed = true)">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

@code {
    [Parameter]
    public OperativeParagraph Paragraph { get; set; }

    [Parameter]
    public Resolution Resolution { get; set; }

    public int Index => this.Resolution?.OperativeSection?.Paragraphs?.IndexOf(this.Paragraph) ?? -1;

    public bool Dismissed { get; set; } = false;

    public Boolean commentsExpanded = false;

    [Parameter]
    //Event called when the arrow up/down buttons are called. Returns true if direction is updwards, false if downwards
    public EventCallback<Boolean> OnMoveEvent { get; set; }

    [Parameter]
    //Event called when the arrow up/down buttons are called. Returns true if direction is updwards, false if downwards
    public EventCallback OnDeleteEvent { get; set; }

    public OperativeParagraphEditor()
    {
        Paragraph = new OperativeParagraph();
    }

    private async void OnInputChange(ChangeEventArgs args)
    {
        //TODO: Implement
    }

    public void RemoveOperativeParagraph()
    {
        this.Resolution.OperativeSection.AddAmendments.RemoveAll(n => n.TargetSectionId == this.Paragraph.OperativeParagraphId);
        this.Resolution.OperativeSection.ChangeAmendments.RemoveAll(n => n.TargetSectionId ==
        this.Paragraph.OperativeParagraphId);
        this.Resolution.OperativeSection.DeleteAmendments.RemoveAll(n => n.TargetSectionId ==
        this.Paragraph.OperativeParagraphId);
        this.Resolution.OperativeSection.Paragraphs.Remove(this.Paragraph);
    }

    public void BringBack()
    {
        this.Resolution.OperativeSection.Paragraphs.Add(this.Paragraph);
    }

}


<style>
    .card {
        transition: max-width .3s ease-in-out;
    }

    .comments {
        transition: .3s ease-in-out;
        max-width: 0%;
        overflow: hidden;
    }

    .comments-expanded {
        max-width: 25%;
        overflow: auto;
    }

    .custom-button {
        border-width: 0px;
        background-color: #00000000;
        transition: .3s;
    }

    .custom-button:hover {
        background-color: #88888826;
    }

    .custom-input-field {
        border: 0px;
        resize: none;
    }

    .no-scrollbar::-webkit-scrollbar {
        display: none;
    }

    .no-scrollbar {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }
</style>