@using MUNityClient.Models.Resolution;
@using MUNityClient.Shared.Resa.Reader;
@using MUNityClient.Extensions.ResolutionExtensions;

@inject MUNityClient.Services.ResolutionService resolutionService;
@if (Resolution != null)
{

    <!-- Header -->
    <div class="row">
        <div class="col-12">
            <h3>@Resolution.Header.Topic</h3>
            @if (!string.IsNullOrEmpty(this.Resolution.Header.SubmitterName))
            {
                <h4>EINBRINGER: @Resolution.Header.SubmitterName.ToUpper()</h4>
            }
            else
            {
                <h4>Kein Einbringer</h4>
            }

            @if (!string.IsNullOrEmpty(this.Resolution.Header.CommitteeName))
            {
                <h4>@Resolution.Header.CommitteeName.ToUpper(),</h4>
            }
            else
            {
                <h4>UNBEKANNTES GREMIUM!,</h4>
            }

        </div>
    </div>


    <!-- Preamble -->
    <div class="row">
        @foreach(var pp in this.Resolution.Preamble.Paragraphs)
        {   
            <ResaReaderPreambleParagraph Paragraph="pp"></ResaReaderPreambleParagraph>
        }
    </div>

    <!-- Operative Section -->
<div class="row">
    @foreach (var op in Resolution.OperativeSection.Paragraphs)
    {
        if (!op.IsVirtual)
        {
            <ResaReaderOperativeParagraph Paragraph="op"
                                          Pathname="@Resolution.GetIndexNameOfOperativeParagraph(op)"
                                          DeleteAmendments="this.Resolution.OperativeSection.DeleteAmendments.Where(n => n.TargetSectionId == op.OperativeParagraphId)"
                                          ChangeAmendments="this.Resolution.OperativeSection.ChangeAmendments.Where(n => n.TargetSectionId == op.OperativeParagraphId)"
                                          MoveAmendments="this.Resolution.OperativeSection.MoveAmendments.Where(n => n.TargetSectionId == op.OperativeParagraphId)"></ResaReaderOperativeParagraph>
        }
        else
        {
            @* Dieser Paragraph kann in Zukunft dazu kommen durch einen Änderungsantrag auf verschieben oder einen Änderungsantrag auf Hinzufügen.
                Um zu ermitteln wie dieser Absatz zustande kommt können diese Funktionen verwendet werden:
                bool durchVerschieben = Resolution.OperativeSection.MoveAmendments.Any(n => n.NewTargetSectionId == op.OperativeParagraphId);
                bool durchHinzufuegen = Resolution.OPerativeSection.AddAmendments.Any(n => n.TargetSectionId == op.OperativeParagraphId);

                Um bei einem Verschieben den Ausgangsabsatz zu bekommen:
                var aenderungsantrag = Resolution.OperativeSection.MoveAmendments.FirstOrDefault(n => n.NewTargetSectionId == op.OperativeParagraphId);
                if (aenderungsantrag != null)
                {
                    var quellParagraph = Resolution.FindOperativeParagraph(aenderungsantrag.TargetSectionId);
                }
            *@

            if (op.Visible)
            {

                <div class="col-12">
                    <div class="card border-success">
                        <div class="card-body">
                            <p>@op.Text</p>
                        </div>
                    </div>
                </div>
            }
        }


    }
</div>
    
}
else
{
    <div class="alert alert-danger">Resolution konnte nicht gefunden werden :(</div>
}

@code {

    [Parameter]
    public Resolution Resolution { get; set; }


    public ResolutionReader()
    {

    }
}
