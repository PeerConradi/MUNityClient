@using MUNity.Models.ListOfSpeakers;
@inject MUNityClient.Services.ListOfSpeakerService listOfSpeakerService;

@if (Speakerlist != null)
{
    <div class="row col-12 m-0 p-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    @if (Speakerlist.CurrentSpeaker != null)
                    {
                        <h5>Es spricht:</h5>
                        <h5>@Speakerlist.CurrentSpeaker.Name</h5>

                        @if (Speakerlist.RemainingSpeakerTime.TotalSeconds <= 0)
                        {
                            <h6 class="text-danger">Bitte zum Ende kommen</h6>
                        }
                        else if (Speakerlist.RemainingSpeakerTime.TotalSeconds <= 10)
                        {
                            <h6 class="text-danger">Verbleibende Zeit: @Speakerlist.RemainingSpeakerTime.ToString(@"mm\:ss")</h6>
                        }
                        else
                        {
                            <h6>Verbleibende Zeit: @Speakerlist.RemainingSpeakerTime.ToString(@"mm\:ss")</h6>
                        }
                    }
                    else
                    {
                        <h5>Aktuell kein(e) RednerIn</h5>
                        <h5>Redezeit: @Speakerlist.SpeakerTime.ToString(@"mm\:ss")</h5>
                    }
                </div>
                <div class="card-body">
                    <h4>Warteliste</h4>
                    @if (Speakerlist.Speakers.Any())
                    {
                        <ul class="list-group">
                            @foreach (var speaker in Speakerlist.Speakers)
                            {
                                <li class="list-group-item">@speaker.Name</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>Niemand auf der Redeliste</p>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string ListOfSpeakersId { get; set; }

    [Parameter]
    public bool IsOnline { get; set; }

    public ListOfSpeakers Speakerlist { get; set; }

    private Services.SocketHandlers.ListOfSpeakerSocketHandler _socket;

    // TODO: Implement different modes
    private enum SyncModes
    {
        FromLocalStorage,
        FromSocket
    }

    protected override async Task OnInitializedAsync()
    {
        if (IsOnline == false)
        {
            this.Speakerlist = await this.listOfSpeakerService.GetListOfSpeakers(ListOfSpeakersId);
        }
        else
        {
            this.Speakerlist = await this.listOfSpeakerService.GetFromApi(ListOfSpeakersId);
            // Add Handlers
            _socket = await this.listOfSpeakerService.Subscribe(this.Speakerlist);
            if (_socket != null)
            {
                _socket.ListOfSpeakersChanged += OnSpeakerlistChanged;
            }
        }
        if (Speakerlist != null)
        {
            var timer = new System.Timers.Timer(1000);
            timer.Elapsed += TimerElapsed;
            timer.Start();
        }
    }

    private async void OnSpeakerlistChanged(ListOfSpeakers newList)
    {
        if (this.Speakerlist != null && this.Speakerlist.ListOfSpeakersId == newList.ListOfSpeakersId)
        {
            this.Speakerlist = newList;
            await this.listOfSpeakerService.StoreListOfSpeakers(newList);
            this.StateHasChanged();
        }
    }

    // Wir aktualisieren zunächst wieder jede Sekunden, da für den Countdown ohnehin jede Sekunde
    // gezählt werden muss.
    private async void TimerElapsed(object sender, System.Timers.ElapsedEventArgs args)
    {
        var list = await this.listOfSpeakerService.GetListOfSpeakers(ListOfSpeakersId);
        if (list != null)
        {
            this.Speakerlist = list;
            this.StateHasChanged();
        }
    }
}
