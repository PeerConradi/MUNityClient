@inject MUNityClient.Services.UserService userService;

@* TODO Form validation *@

<EditForm Model="@this.Request" OnSubmit="@Login" class="text-center border border-light p-5">
    <p class="h4 mb-4">Login</p>
    <InputText @bind-Value="this.Request.Username" placeholder="Username" class="form-control mb-4" />
    <InputText type="password" class="form-control mb-4" @bind-Value="this.Request.Password" placeholder="Passwort" />

    <div class="d-flex justify-content-around">
        <div>
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="defaultLoginFormRemember">
                <label class="custom-control-label" for="defaultLoginFormRemember">Eingeloggt bleiben</label>
            </div>
        </div>
        <div>
            <a href="">Passwort vergessen?</a>
        </div>
    </div>
    @if (this.LoginState != ELoginStates.LOGGING_IN)
        {
            <button class="btn btn-info btn-block my-4" type="submit">Einloggen</button>
        }
        else
        {
            <button class="btn btn-info btn-block my-4">
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </button>
        }

        <p>
            oder
            <NavLink href="/auth/register">Registriere</NavLink>
            dich
        </p>

        <!-- Social login -->
        @* <p>or sign in with:</p>

            <a href="#" class="mx-2" role="button"><i class="fab fa-facebook-f light-blue-text"></i></a>
            <a href="#" class="mx-2" role="button"><i class="fab fa-twitter light-blue-text"></i></a>
            <a href="#" class="mx-2" role="button"><i class="fab fa-linkedin-in light-blue-text"></i></a>
            <a href="#" class="mx-2" role="button"><i class="fab fa-github light-blue-text"></i></a> *@




    </EditForm>


    @if (this.LoginState == ELoginStates.FAILED)
{
    <p>Login Fehlgeschlagen</p>
}

@code {
    public MUNityClient.Models.User.AuthenticateRequest Request { get; set; } = new Models.User.AuthenticateRequest();

    private enum ELoginStates
    {
        NOT_TRIED,
        LOGGING_IN,
        FAILED,
        SUCCESS
    }

    private ELoginStates LoginState = ELoginStates.NOT_TRIED;

    private async Task Login()
    {
        this.LoginState = ELoginStates.LOGGING_IN;
        var response = await userService.Login(this.Request);
        this.LoginState = (response == null) ? ELoginStates.FAILED : ELoginStates.SUCCESS;
    }
}
