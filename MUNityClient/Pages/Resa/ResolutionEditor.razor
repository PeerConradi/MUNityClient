<!-- Navigate to id test /resa/edit/test to show a test resolution without anything -->
@page "/resa/edit/{id}"
@using MUNityClient.Models.Resolution;
@using MUNityClient.Extensions;
@using MUNityClient.Shared.Resa;
@using MUNityClient.Extensions.ResolutionExtensions;
@inject MUNityClient.Services.ResolutionService resolutionService;

@if (this.Resolution != null)
{

    var corruptionResult = MUNityClient.Managing.ResolutionManaging.ResolutionTroubleshooting.IsResolutionCorrupted(this.Resolution);
    if (corruptionResult.isCorrupted)
    {
        <div class="row d-flex justify-content-center my-5 align-items-center">
            <i class="fas fa-exclamation-circle fa-2x text-danger mr-2"></i>
            <h3>Achtung die Resolution ist beschädigt.</h3>
            <p>@corruptionResult.log</p>
            <button @onclick="() => RepairResolution()" class="btn aqua-gradient">Jetzt reparieren</button>
        </div>
    }

    if (this.SyncMode == SyncModes.Offline)
    {
        <div class="row">
            <div class="col-12 alert alert-warning">
                <b>Die Resolution wird nicht an den Server übertragen und ist lediglich offline im Speicher des Browsers gespeichert. (TODO: Download-Button um json Datei runterladen zu können) (TODO: Erneut versuchen button)</b>
            </div>
        </div>
    }
    else if (this.SyncMode == SyncModes.PingingServer)
    {
        <div class="row">
            <div class="col-12 alert alert-info">
                <b>Es wird versucht eine Verbindung zum Server herzustellen.</b>
            </div>
    }

    <div class="row p-0 m-0 d-flex justify-content-center">
        <div class="row col-lg-8 col-xl-6 p-2 paragraphs">
            <div class="accordion col-12" id="accordion">
                <div class="card">
                    <div role="button" class="card-header row m-0" type="button" data-toggle="collapse"
                         data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne"
                         @onclick="() => preambleExpandingState = !preambleExpandingState">
                        <h3>
                            Präambel
                            <i class="fas fa-angle-down ml-2 expansionIcon"></i>
                        </h3>
                    </div>
                    <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion">
                        @* Preamble *@
                        <div class="card-body paragraph-body row p-0 m-0">
                            @foreach (var preambleParagraph in this.Resolution.Preamble.Paragraphs)
                            {
                                <PreambleParagraphEditor Paragraph="preambleParagraph" Resolution="this.Resolution"
                                                         OnMoveEvent="@((up)=> MovePreambleParagraph(up, preambleParagraph))"
                                                         OnDeleteEvent="@(() => {PreambleMarkedForDeletion = preambleParagraph; DeletePreambleParagraphModal.Open();})" />
                            }
                        </div>
                        <div class="card-footer">
                            <button class="btn btn-dark-green btn-block mt-4" @onclick="AddPreambleParagraph">
                                <i class="fas fa-plus mr-3"></i>Neuer Präamble Paragraph
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card">
                    <div role="button" class="card-header row m-0 collapsed" type="button" data-toggle="collapse"
                         data-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo"
                         @onclick="() => operativeExpandingState = !operativeExpandingState">
                        <h3>
                            Operativer Abschnitt
                            <i class="fas fa-angle-down ml-2 expansionIcon "></i>
                        </h3>
                    </div>
                    <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordion">
                        @* Operative section *@
                        <div class="card-body paragraph-body row p-0 m-0">
                            @foreach (var operative in this.Resolution.OperativeSection.Paragraphs)
                            {
                                @if (!operative.IsVirtual)
                                {
                                    <OperativeParagraphEditor Resolution="this.Resolution" Paragraph="operative"
                                                              OnMoveEvent="@((up)=> MoveOperativeParagraph(up, operative))"
                                                              OnDeleteEvent="@(() => {OperativeMarkedForDeletion = operative; DeleteOperativeParagraphModal.Open();})" />
                                }
                                else
                                {
                                    <div class="col-12">
                                        @{
                                            var moveParent = this.Resolution.OperativeSection.MoveAmendments.FirstOrDefault(n => n.NewTargetSectionId == operative.OperativeParagraphId);

                                        }

                                        @if (operative.Visible)
                                        {
                                            <div class="alert alert-primary">
                                                An dieser Stelle ist ein eingeblendeter Virtueller Absatz
                                                @if (moveParent != null)
                                                {
                                                    var sourceParagraph = Resolution.OperativeSection.GetIndexNameOfOperativeParagraph(moveParent.TargetSectionId);
                                                    <span>Der Absatz @sourceParagraph soll an diese Stelle geschoben werden.</span>
                                                }
                                                else
                                                {
                                                    <span>Dieser Absatz kommt scheinbar über einen Änderungsantrag auf Hinzufügen. Der Neue Text ist: </span>
                                                    <p>@operative.Text</p>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-secondary mt-2"> An dieser Stelle ist ein ausgelbendeter Virtueller Absatz</div>
                                        }

                                    </div>

                                }
                            }
                        </div>
                        <div class="card-footer">
                            <button class="btn btn-dark-green btn-block mt-4" @onclick="AddOperativeParagraph">
                                <i class="fas fa-plus mr-3"></i>Neuer operativer Absatz
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Amendments -->
        <div class="col-lg-4">
            <div class="card m-1">
                <div class="card-header">
                    <h3>Änderungsanträge</h3>
                </div>
                <div class="card-body ammendment-body row p-0 m-0">
                    @foreach (var amendment in OrderedAmendments)
                    {
                        <MUNityClient.Shared.Resa.AmendmentCard Amendment="amendment" Resolution="this.Resolution"
                                                                Interaction="AmendmentInteracted"></MUNityClient.Shared.Resa.AmendmentCard>
                    }
                </div>
                <div class="card-footer">
                    <button class="btn btn-block btn-dark-green" @onclick="ShowNewAmendmentModal">
                        <i class="fas fa-plus mr-3"></i>
                        Neuer
                        Änderungsantrag
                    </button>
                </div>
            </div>
        </div>
    </div>

    @* Preamble Paragraph Delete Modal *@
    <MUNityClient.Shared.Bootstrap.Modal Title="Löschen bestätigen" @ref="DeletePreambleParagraphModal"
                                         OnSubmitCallback="removePreambleParagraph">
        Bist du sicher, dass du den Paragraphen löschen möchtest?
    </MUNityClient.Shared.Bootstrap.Modal>

    @* Operative Paragraph Delete Modal *@
    <MUNityClient.Shared.Bootstrap.Modal Title="Löschen bestätigen" @ref="DeleteOperativeParagraphModal"
                                         OnSubmitCallback="removeOperativeParagraph">
        Bist du sicher, dass du den Paragraphen löschen möchtest?
    </MUNityClient.Shared.Bootstrap.Modal>

    <MUNityClient.Shared.Bootstrap.Modal Title="Neuer Änderungsantrag" @ref="AddAmendmentModal"
                                         OnSubmitCallback="NewAmendment">
        <MUNityClient.Shared.Resa.NewAmendmentForm Resolution="this.Resolution" @ref="NewAmendmentForm">
        </MUNityClient.Shared.Resa.NewAmendmentForm>
    </MUNityClient.Shared.Bootstrap.Modal>
}
else
{
    if (!fetchingResolutionErrored)
    {

        <div class="row d-flex w-100 justify-content-center mt-5">
            <div class="d-flex w-100 justify-content-center">
                <div class="spinner-border text-primary p-4" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <div class="d-flex justify-content-center mt-5">
                Lade Resolution, einen Moment bitte...
            </div>
        </div>
    }
    else
    {
        <div class="row d-flex w-100 justify-content-center mt-5">
            <div class="d-flex w-100 justify-content-center">
                <i class="fas fa-6x fa-exclamation-circle text-danger"></i>
            </div>
            <div class="d-flex justify-content-center mt-5 text-center">
                Beim Laden der Resolution ist ein Fehler aufgetreten! <br> Bitte vergewissere dich, dass die angeforderte
                Resolution existiert!
            </div>
        </div>
    }
}



@code {
    [Parameter]
    public string Id { get; set; }


    private MUNityClient.Shared.Bootstrap.Modal AddAmendmentModal { get; set; }
    private MUNityClient.Shared.Bootstrap.Modal DeletePreambleParagraphModal { get; set; }
    private MUNityClient.Shared.Bootstrap.Modal DeleteOperativeParagraphModal { get; set; }
    private MUNityClient.Shared.Resa.NewAmendmentForm NewAmendmentForm { get; set; }
    public Resolution Resolution { get; set; }
    private PreambleParagraph PreambleMarkedForDeletion { get; set; }
    private OperativeParagraph OperativeMarkedForDeletion { get; set; }
    private Boolean fetchingResolutionErrored = false;
    private Boolean preambleExpandingState = true;
    private Boolean operativeExpandingState = true;
    private Boolean amendmentExpandingState = true;

    private enum SyncModes
    {
        PingingServer,
        Offline,
        OnlineButNotSyncing,
        Syncing
    }

    private SyncModes SyncMode = SyncModes.PingingServer;

    public ResolutionEditor()
    {

    }

    protected override async Task OnInitializedAsync()
    {
        // Get the resolution from any source (local or online)
        this.Resolution = await this.resolutionService.GetResolution(Id);

        if (Resolution != null)
        {
            // Das ganze kann im Hintergrund stattfinden und solange kann
            // Der Benutzer schon einmal arbeiten, denn die Resolution ist ja auf die eine
            // oder anderer Weise rein gekommen (offline oder online)
            _ = this.resolutionService.IsOnline().ContinueWith((result) =>
            {
                if (result.Result == true)
                {
                    this.SyncMode = SyncModes.OnlineButNotSyncing;

                // TODO:
                // Beim Server anfragen ob die Resolution bearbeitet werden darf
                // Wenn nein: OnlineButNotSyncing
                // Wenn ja: SignalR initializieren und SyncMode auf Syncing setzen.
                // var signalRHub = await this.resolutionService.Subscribe(this.Resolution);
            }
                else
                {
                    this.SyncMode = SyncModes.Offline;
                }
                this.StateHasChanged();
            });

            this.Resolution.Preamble?.Paragraphs?.ForEach(n => n.TextChanged += PreambleTextChanged);
            this.Resolution.OperativeSection.Paragraphs?.ForEach(n => n.TextChanged += OperativeTextChanged);
        }
    }

    private void PreambleTextChanged(PreambleParagraph sender, string oldText, string newText)
    {
        this.Resolution.Date = DateTime.Now;
        if (SyncMode == SyncModes.Syncing)
        {
            this.resolutionService.UpdatePublicResolutionPreambleParagraph(this.Resolution.ResolutionId, sender);
        }
        else if (SyncMode == SyncModes.Offline)
        {
            SaveResolution();
        }
    }

    private void OperativeTextChanged(OperativeParagraph sender, string oldText, string newText)
    {
        this.Resolution.Date = DateTime.Now;
        if (SyncMode == SyncModes.Syncing)
        {
            this.resolutionService.UpdatePublicResolutionOperativeParagraph(this.Resolution.ResolutionId, sender);
        }
        else if (SyncMode == SyncModes.Offline)
        {
            SaveResolution();
        }
    }

    private async void SaveResolution()
    {
        if (this.Resolution.ResolutionId == "test") return;

        if (SyncMode == SyncModes.Syncing)
        {
            var result = await this.resolutionService.UpdatePublicResolution(this.Resolution);
            if (result.IsSuccessStatusCode)
            {
                // TODO: Save success notification!
                // currently the whole document will be saved as one.
            }
            else
            {
                // TODO: Save failure notification!
            }
        }
        else if (SyncMode == SyncModes.Offline)
        {
            this.resolutionService.SaveOfflineResolution(this.Resolution);
        }
    }

    public void removePreambleParagraph()
    {
        this.Resolution.Date = DateTime.Now;
        PreambleMarkedForDeletion.TextChanged -= PreambleTextChanged;
        this.Resolution?.Preamble?.Paragraphs?.Remove(PreambleMarkedForDeletion);
        SaveResolution();
    }

    public void removeOperativeParagraph()
    {
        this.Resolution.Date = DateTime.Now;
        OperativeMarkedForDeletion.TextChanged -= OperativeTextChanged;
        this.Resolution?.OperativeSection.RemoveOperativeParagraph(OperativeMarkedForDeletion);
        SaveResolution();
    }

    //Move a preamble section in the given direction. It's called by the move event from the preambleParagraph child
    //component
    public void MovePreambleParagraph(Boolean up, PreambleParagraph preambleParagraph)
    {
        this.Resolution.Date = DateTime.Now;
        int originalIndex = this.Resolution?.Preamble?.Paragraphs?.IndexOf(preambleParagraph) ?? -1;
        this.Resolution.Preamble.Paragraphs.Move(originalIndex, up ? MoveDirection.Up : MoveDirection.Down);
        SaveResolution();
    }

    //Move an operative section in the given direction. It's called by the move event from the operativeParagraph child
    //component
    public void MoveOperativeParagraph(Boolean up, OperativeParagraph preambleParagraph)
    {
        this.Resolution.Date = DateTime.Now;
        int originalIndex = this.Resolution?.OperativeSection?.Paragraphs?.IndexOf(preambleParagraph) ?? -1;
        this.Resolution.OperativeSection.Paragraphs.Move(originalIndex, up ? MoveDirection.Up : MoveDirection.Down);
        SaveResolution();
    }

    public void AmendmentInteracted()
    {
        this.StateHasChanged();
        SaveResolution();
    }

    private void AddPreambleParagraph()
    {
        this.Resolution.Date = DateTime.Now;
        var paragraph = this.Resolution.CreatePreambleParagraph();
        paragraph.TextChanged += PreambleTextChanged;
        SaveResolution();
    }

    private void AddOperativeParagraph()
    {
        this.Resolution.Date = DateTime.Now;
        var paragraph = this.Resolution.OperativeSection.CreateOperativeParagraph();
        paragraph.TextChanged += OperativeTextChanged;
        SaveResolution();
    }

    private void ShowNewAmendmentModal()
    {
        this.AddAmendmentModal.Open();
    }

    private void NewAmendment()
    {
        var amendment = this.NewAmendmentForm.GetAmendment();
        if (amendment == null)
        {
            // TODO: Meldung zeigen Resolution konnte nicht erstellt werden!
        }
        this.AddAmendmentModal.Close();
        SaveResolution();
    }

    /// <summary>
    /// List of amendments in visible order. This is the order of all the amendments
    /// first of by the paragraph they address from top to bottom.
    /// Then Amendments to delete are shown first, after that amendments to change the paragraph, after that
    /// amendments to move the paragraph.
    ///
    /// Amendments to add a new paragraph are shown last!
    /// </summary>
    private IEnumerable<IAmendment> OrderedAmendments
    {
        get
        {
            var list = new List<IAmendment>();
            foreach (var paragraph in this.Resolution.OperativeSection.Paragraphs)
            {
                var deleteAmendments = this.Resolution.OperativeSection.DeleteAmendments.Where(n => n.TargetSectionId ==
                paragraph.OperativeParagraphId);
                if (deleteAmendments.Any())
                    list.AddRange(deleteAmendments);

                var changeAmendments = this.Resolution.OperativeSection.ChangeAmendments.Where(n => n.TargetSectionId ==
                paragraph.OperativeParagraphId);
                if (changeAmendments.Any())
                    list.AddRange(changeAmendments);

                var moveAmendments = this.Resolution.OperativeSection.MoveAmendments.Where(n => n.TargetSectionId ==
                paragraph.OperativeParagraphId);
                if (moveAmendments.Any())
                    list.AddRange(moveAmendments);
            }

            list.AddRange(this.Resolution.OperativeSection.AddAmendments);
            return list;
        }
    }

    private EventCallback RepairResolution()
    {
        MUNityClient.Managing.ResolutionManaging.ResolutionTroubleshooting.FixResolution(this.Resolution);
        SaveResolution();
        return EventCallback.Empty;
    }

}


<style>
    @* The used accordion is based on the standard bootstrap accordion
       The used CSS classes are default and will be expanded by the following CSS
       to make the Icon animated dependent on the expand state *@

    @* The order of the css classes MATTERS for the expansion icon! *@
    .expansionIcon {
        transition: all .3s;

        transform: rotate(0);
        -webkit-transform: rotate(0deg);
        -moz-transform: rotate(0deg);
        -o-transform: rotate(0deg);
        -ms-transform: rotate(0deg);
        transform: rotate(0deg);
    }

    .collapsed > h3 > i{
        transform: rotate(-90);
        -webkit-transform: rotate(-90deg);
        -moz-transform: rotate(-90deg);
        -o-transform: rotate(-90deg);
        -ms-transform: rotate(-90deg);
        transform: rotate(-90deg);
    }

    .paragraphs {
        @* overflow-y: auto;
        max-height: 85vh; *@
    }

    .ammendment-body {
        overflow-y: auto;
        max-height: 70vh;
    }

    .paragraph-body {
        overflow-y: auto;
        max-height: 65vh;
    }
</style>