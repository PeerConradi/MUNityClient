<!-- Navigate to id test /resa/edit/test to show a test resolution without anything -->
@page "/resa/edit/{id}"
@page "/resa/edit/{id}/{mode}"
@using MUNityClient.Models.Resolution;
@using MUNityClient.Extensions;
@using MUNityClient.Shared.Resa;
@inject MUNityClient.Services.ResolutionService resolutionService;

@if (this.Resolution != null)
{
    <div class="row justify-content-center">
        <div class="col-11">
            @* Preamble *@
            <div>
                <h3 class="font-weight-bold">Präambel</h3>
                @* Preamble paragraphs *@
                @foreach (var preambleParagraph in this.Resolution.Preamble.Paragraphs)
                {
                    <PreambleParagraphEditor Paragraph="preambleParagraph" Resolution="this.Resolution"
                                             OnMoveEvent="@((up)=> MovePreambleParagraph(up, preambleParagraph))"
                                             OnDeleteEvent="@(() => {MarkedForDeletion = preambleParagraph; DeletePreambleParagraphModal.Open();})"/>
                }
                <button class="btn btn-dark-green btn-block mt-4" @onclick="AddPreambleParagraph">
                    <i class="fas fa-plus mr-3"></i>Neuer Präambel
                    Paragraph
                </button>
            </div>
        </div>
    </div>

    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <!--  and Operative Section-->

    <h3>Operativer Abschnitt</h3>
    @foreach (var operative in this.Resolution.OperativeSection.Paragraphs)
    {
        <MUNityClient.Shared.Resa.OperativeParagraphEditor Resolution="this.Resolution" Paragraph="operative" />
    }

    <button class="btn btn-success btn-block" @onclick="AddOperativeParagraph">Neuer Operativer Absatz</button>

    <!-- Amendments -->
    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">
                <h3>Änderungsanträge</h3>
                <button class="btn btn-block btn-success" @onclick="ShowNewAmendmentModal">
                    Neuer
                    Änderungsantrag
                </button>
            </div>
            <div class="card-body">
                @foreach (var amendment in OrderedAmendments)
                {
                    <MUNityClient.Shared.Resa.AmendmentCard Amendment="amendment" Resolution="this.Resolution"
                                                            Interaction="AmendmentInteracted"></MUNityClient.Shared.Resa.AmendmentCard>
                }
            </div>
        </div>
    </div>

    @* Preamble Paragraph Delete Modal *@
    <MUNityClient.Shared.Bootstrap.Modal Title="Löschen bestätigen" @ref="DeletePreambleParagraphModal"
        OnSubmitCallback="removePreambleParagraph">
        Bist du sicher, dass du den Paragraphen löschen möchtest?
    </MUNityClient.Shared.Bootstrap.Modal>

    <MUNityClient.Shared.Bootstrap.Modal Title="Neuer Änderungsantrag" @ref="AddAmendmentModal"
        OnSubmitCallback="NewAmendment">
        <MUNityClient.Shared.Resa.NewAmendmentForm Resolution="this.Resolution" @ref="NewAmendmentForm">
        </MUNityClient.Shared.Resa.NewAmendmentForm>
    </MUNityClient.Shared.Bootstrap.Modal>
}
else
{
    if(!fetchingResolutionErrored){
        
    <div class="row d-flex w-100 justify-content-center mt-5">
            <div class="d-flex w-100 justify-content-center">
                <div class="spinner-border text-primary p-4" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <div class="d-flex justify-content-center mt-5">
                Lade Resolution, einen Moment bitte...
            </div>
        </div>
    } else {
    <div class="row d-flex w-100 justify-content-center mt-5">
            <div class="d-flex w-100 justify-content-center">
                <i class="fas fa-6x fa-exclamation-circle text-danger"></i>
            </div>
            <div class="d-flex justify-content-center mt-5 text-center">
                Beim Laden der Resolution ist ein Fehler aufgetreten! <br> Bitte vergewissere dich, dass die angeforderte Resolution existiert!
            </div>
        </div>
    }
}



@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Mode { get; set; }


    private MUNityClient.Shared.Bootstrap.Modal AddAmendmentModal { get; set; }
    private MUNityClient.Shared.Bootstrap.Modal DeletePreambleParagraphModal { get; set; }

    private MUNityClient.Shared.Resa.NewAmendmentForm NewAmendmentForm { get; set; }

    public Resolution Resolution { get; set; }

    private PreambleParagraph MarkedForDeletion { get; set; }

    private Boolean fetchingResolutionErrored = false;

    public ResolutionEditor()
    {

    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Mode))
        {
            this.Resolution = await this.resolutionService.GetPublicResolution(Id);
            if (this.Resolution == null) this.fetchingResolutionErrored = true;
            else
            {
                // Register WebSocket!
                var signalRHub = await this.resolutionService.Subscribe(this.Resolution);
            }

        }
        else if (Mode == "offline")
        {
            this.Resolution = await this.resolutionService.GetOfflineResolution(Id);
            if (this.Resolution == null) this.fetchingResolutionErrored = true;
        }

    }

    private void PreambleTextChanged(PreambleParagraph sender, string oldText, string newText)
    {
        // For now we save everything later only the PreambleChanged should be send to the server!
        //SaveResolution();
        if (string.IsNullOrEmpty(Mode))
        {
            this.resolutionService.UpdatePublicResolutionPreambleParagraph(this.Resolution.ResolutionId, sender);
        }
    }

    private async void SaveResolution()
    {
        if (this.Resolution.ResolutionId == "test") return;

        if (string.IsNullOrEmpty(Mode))
        {
            var result = await this.resolutionService.UpdatePublicResolution(this.Resolution);
            if (result.IsSuccessStatusCode)
            {
                // TODO: Save success notification!
                // currently the whole document will be saved as one.

            }
            else
            {
                // TODO: Save failure notification!
            }
        }
        else if (Mode == "offline")
        {
            this.resolutionService.SaveOfflineResolution(this.Resolution);
        }
    }

    public void removePreambleParagraph()
    {
        this.Resolution?.Preamble?.Paragraphs?.Remove(MarkedForDeletion);
        SaveResolution();
    }

    //Move a preamble section in the given direction. It's called by the move event from the preambleParagraph child
    //component
    public void MovePreambleParagraph(Boolean up, PreambleParagraph preambleParagraph)
    {
        int originalIndex = this.Resolution?.Preamble?.Paragraphs?.IndexOf(preambleParagraph) ?? -1;
        this.Resolution.Preamble.Paragraphs.Move(originalIndex, up ? MoveDirection.Up : MoveDirection.Down);
        SaveResolution();
    }

    public void AmendmentInteracted()
    {
        this.StateHasChanged();
    }

    private void AddPreambleParagraph()
    {
        this.Resolution.Preamble.Paragraphs.Add(new PreambleParagraph());
        SaveResolution();
    }

    private void AddOperativeParagraph()
    {
        this.Resolution.OperativeSection.Paragraphs.Add(new OperativeParagraph());
        SaveResolution();
    }

    private void ShowNewAmendmentModal()
    {
        this.AddAmendmentModal.Open();
    }

    private void NewAmendment()
    {
        var amendment = this.NewAmendmentForm.GetAmendment();
        if (amendment is ChangeAmendment changeAmendment)
        {
            this.Resolution.OperativeSection.ChangeAmendments.Add(changeAmendment);
        }
        this.AddAmendmentModal.Close();
        SaveResolution();
    }

    /// <summary>
    /// List of amendments in visible order. This is the order of all the amendments
    /// first of by the paragraph they address from top to bottom.
    /// Then Amendments to delete are shown first, after that amendments to change the paragraph, after that
    /// amendments to move the paragraph.
    ///
    /// Amendments to add a new paragraph are shown last!
    /// </summary>
    private IEnumerable<IAmendment> OrderedAmendments
    {
        get
        {
            var list = new List<IAmendment>();
            foreach (var paragraph in this.Resolution.OperativeSection.Paragraphs)
            {
                var deleteAmendments = this.Resolution.OperativeSection.DeleteAmendments.Where(n => n.TargetSectionId ==
                paragraph.OperativeParagraphId);
                if (deleteAmendments.Any())
                    list.AddRange(deleteAmendments);

                var changeAmendments = this.Resolution.OperativeSection.ChangeAmendments.Where(n => n.TargetSectionId ==
                paragraph.OperativeParagraphId);
                if (changeAmendments.Any())
                    list.AddRange(changeAmendments);

                var moveAmendments = this.Resolution.OperativeSection.MoveAmendments.Where(n => n.TargetSectionId ==
                paragraph.OperativeParagraphId);
                if (moveAmendments.Any())
                    list.AddRange(moveAmendments);
            }

            list.AddRange(this.Resolution.OperativeSection.AddAmendments);
            return list;
        }
    }

}
