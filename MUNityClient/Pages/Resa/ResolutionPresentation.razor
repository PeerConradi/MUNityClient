@page "/resa/read/{id}"
@using MUNityClient.Models.Resolution;
@inject MUNityClient.Services.ResolutionService resolutionService;

@if (this.Resolution != null)
{
    <div class="row">
        <div class="col-12">
            <MUNityClient.Shared.Resa.ResolutionReader Resolution="this.Resolution">
            </MUNityClient.Shared.Resa.ResolutionReader>
        </div>
    </div>
}
else
{
    <p>Resolution nicht bereit!</p>
}


@code {
    [Parameter]
    public string Id { get; set; }

    public Resolution Resolution { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var resolutionLocal = await this.resolutionService.GetResolution(this.Id);
        if (resolutionLocal != null)
        {
            // An dieser Stelle hängen wir das StorageChanged Event ran. Es wird nur gefeuert, wenn die Änderung
            // nicht durch diesen Browser Tab vorgenommen wurde.
            this.Resolution = resolutionLocal;
            this.resolutionService.StorageChanged += RefreshFromStorage;
        }
        else
        {
            this.Resolution = await this.resolutionService.GetPublicResolution(this.Id);

            if (this.Resolution != null)
            {
                await this.resolutionService.Subscribe(this.Resolution);
            }
        }
    }

    /// <summary>
    /// Reloads the Resolution and fires a State changed.
    /// </summary>
    private async void RefreshFromStorage()
    {
        if (Resolution != null)
        {
            this.Resolution = await this.resolutionService.GetStoredResolution(this.Resolution.ResolutionId);
            this.StateHasChanged();
        }

    }

}
