@page "/resa/home"
@inject MUNityClient.Services.ResolutionService resolutionService;
@inject NavigationManager navigationManager;

<h3>MUNity Resolutions-Editor</h3>

<button @onclick="CreatePublicResolution" class="btn btn-success">Öffentliche Resolution erstellen</button>

<button @onclick="CreateLocalResolution" class="btn btn-success">Lokale Resolution erstellen</button>

<NavLink href="resa/edit/test">Open Resolution Editor with Test</NavLink>


<h1>Lokal gespeicherte Resolutionen:</h1>

@if (localResolutions != null)
{
<div class="card-deck">
    @foreach (var resa in localResolutions)
    {
        <div class="card mb-4">
            <div class="card-body">
                <h3 class="card-title">@resa.Title</h3>
                <p class="card-text">@resa.LastChangedDate.ToLocalTime().ToLongDateString() - @resa.LastChangedDate.ToLocalTime().ToShortTimeString()</p>
                <button type="button" class="btn btn-light-blue btn-md" @onclick="() => OpenResolution(resa.ResolutionId)">Bearbeiten</button>
                <button type="button" class="btn btn-light-blue btn-md" @onclick="() => OpenReader(resa.ResolutionId)">Lesen</button>
            </div>
        </div>
    }
</div>
}
else
{
    if (loadingLocalsDone)
    {
        <p>Es wurden keine Lokal gespeicherten Resolutionen gefunden</p>
    }
    else
    {
        <p>Lokale Resolutionen werden geladen</p>
    }

}


@code {
    private bool loadingLocalsDone = false;

    private List<MUNityClient.Models.Resolution.ResolutionInfo> localResolutions;

    private async Task CreateLocalResolution()
    {
        var resolution = await this.resolutionService.CreateResolution();
        if (resolution != null)
        {
            navigationManager.NavigateTo($"resa/edit/{resolution.ResolutionId}");
        }
    }

    private async Task CreatePublicResolution()
    {
        var resolution = await this.resolutionService.CreatePublicResolution("Neue Resolution");
        if (resolution != null)
        {
            navigationManager.NavigateTo($"resa/edit/{resolution.ResolutionId}");
        }
    }

    private EventCallback OpenResolution(string id)
    {
        navigationManager.NavigateTo($"resa/edit/{id}");
        return EventCallback.Empty;
    }



    private EventCallback OpenReader(string id)
    {
        navigationManager.NavigateTo($"resa/read/{id}");
        return EventCallback.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        this.localResolutions = await resolutionService.GetStoredResolutions();
        this.loadingLocalsDone = true;
    }
}
