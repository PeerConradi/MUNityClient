@page "/resa/home"
@inject MUNityClient.Services.ResolutionService resolutionService;
@inject NavigationManager navigationManager;

<div class="row m-0 col-12 d-flex justify-content-around">
    <div class="card col-11 col-md-5 p-0 my-3">
        <div class="card-body pb-0 px-0 row m-0 d-flex justify-content-center">
            <i class="fas fa-5x fa-cloud text-primary mb-4"></i>
            <p class="col-12 text-justify">
                Eine Cloud Resolution wird auf dem MUN Server gespeichert. Du kannst sie über deinen Browser bearbeiten
                und sie für andere Freigeben.
                Teilnehmende können auf die Resolution zugreifen. Kooperatives Zusammenarbeiten mit dem Sekretariat ist
                möglich. Sie ist live auf verschiedenen Geräten abrufbar.
            </p>
            @if (backendReady)
            {
                <button @onclick="CreatePublicResolution" class="btn btn-success m-0 col-12">
                    Cloud Resolution
                    erstellen
                </button>
            }
            else
            {
                <p class="m-0 col-12">Hintergrunddienst wird verbunden oder nicht verfügbar.</p>
            }

        </div>
    </div>
    <div class="card col-11 col-md-5 p-0 my-3">
        <div class="card-body pb-0 px-0 row m-0 d-flex justify-content-center">
            <i class="fas fa-5x fa-download text-primary mb-4"></i>
            <p class="col-12 text-justify">
                Eine lokale Resolution ist eine Resolution in deinem Browser. Sie ist nur für dich in verschiedenen
                Tabs
                des selben Browsers aufrufbar, nicht jedoch in anderen
                Browsern oder auf anderen Geräten. Verwende diese Option nur
                wenn keine Internetverbindung besteht, oder zum Ausprobieren der Anwendung.
            </p>
            <button @onclick="CreateLocalResolution" class="btn btn-success m-0 col-12">Lokale Resolution
                erstellen</button>
        </div>
    </div>
</div>
<div class="row mx-0 mb-0 mt-4 col-12 d-flex justify-content-center">
    @if (localResolutions != null && localResolutions.Count() > 0)
    {
        <div class="card-deck">
            @foreach (var resa in localResolutions)
            {
                <div class="card mb-4">
                    <div class="card-body">
                        <h3 class="card-title">@resa.Title</h3>
                        <p class="card-text">Letzte Änderung: @resa.LastChangedDate.ToString("HH:mm") -  @resa.LastChangedDate.ToString("dd.MM.yyyy")
                            </p>
                            <a href="/resa/edit/@resa.ResolutionId">
                                <button type="button" class="btn btn-primary btn-md">Bearbeiten</button>
                            </a>
                            <a href="/resa/read/@resa.ResolutionId">
                                <button type="button" class="btn btn-primary btn-md">Lesen</button>
                            </a>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        if (loadingLocalsDone)
        {
            <p>Es wurden keine Lokal gespeicherten Resolutionen gefunden</p>
        }
        else
        {
            <p>Lokale Resolutionen werden geladen</p>
        }

    }
</div>

@* TODO: Delete?! *@
@* <NavLink href="resa/edit/test">Open Resolution Editor with Test</NavLink> *@


@code {
    private bool loadingLocalsDone = false;

    private bool backendReady = false;

    private List<MUNityClient.Models.Resolution.ResolutionInfo> localResolutions;

    private async Task CreateLocalResolution()
    {
        var resolution = await this.resolutionService.CreateResolution("Neue lokale Resolution");
        if (resolution != null)
        {
            navigationManager.NavigateTo($"resa/edit/{resolution.ResolutionId}");
        }
    }

    private async Task CreatePublicResolution()
    {
        var resolution = await this.resolutionService.CreatePublicResolution("Neue Cloud Resolution");
        if (resolution != null)
        {
            navigationManager.NavigateTo($"resa/edit/{resolution.ResolutionId}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        this.localResolutions = await resolutionService.GetStoredResolutions();
        this.loadingLocalsDone = true;
        this.backendReady = await resolutionService.IsOnline(true);
    }
}
