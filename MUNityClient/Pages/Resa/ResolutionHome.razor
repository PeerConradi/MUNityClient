@page "/resa/home"
@inject MUNityClient.Services.ResolutionService resolutionService;
@inject NavigationManager navigationManager;

<h3>MUNity Resolutions-Editor</h3>

<button @onclick="CreateResolution" class="btn btn-success">Resolution erstellen</button>

<NavLink href="resa/edit/test">Open Resolution Editor with Test</NavLink>


<h1>Lokal gespeicherte Resolutionen:</h1>

@if (localResolutions != null)
{
    <ul>
        @foreach (var resa in localResolutions)
        {
            <li><button @onclick="() => OpenResolution(resa.ResolutionId)">[@resa.Title] - Im Offline Editor öffnen</button> <button @onclick="() => OpenReader(resa.ResolutionId)">[@resa.Title] - Im Reader öffnen</button></li>
        }
    </ul>
}
else
{
    if (loadingLocalsDone)
    {
        <p>Es wurden keine Lokal gespeicherten Resolutionen gefunden</p>
    }
    else
    {
        <p>Lokale Resolutionen werden geladen</p>
    }

}


@code {
    private bool loadingLocalsDone = false;

    private List<MUNityClient.Models.Resolution.ResolutionInfo> localResolutions;

    private async Task CreateResolution()
    {
        var resolution = await this.resolutionService.CreateResolution();
        if (resolution != null)
        {
            navigationManager.NavigateTo($"resa/edit/{resolution.ResolutionId}");
        }
    }

    private EventCallback OpenResolution(string id)
    {
        navigationManager.NavigateTo($"resa/edit/{id}");
        return EventCallback.Empty;
    }



    private EventCallback OpenReader(string id)
    {
        navigationManager.NavigateTo($"resa/read/{id}");
        return EventCallback.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        this.localResolutions = await resolutionService.GetStoredResolutions();
        this.loadingLocalsDone = true;
    }
}
