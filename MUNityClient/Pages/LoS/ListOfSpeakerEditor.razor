@using MUNityClient.Models.ListOfSpeakers;
@using System.Timers;

@page "/los/edit/{id}"

@inject MUNityClient.Services.ListOfSpeakerService listOfSpeakerService;
@inject IJSRuntime jsRuntime

@if (Speakerlist != null)
{
    <div class="row m-0 px-2 col-12 d-flex justify-content-center">
        <div class="row col-12 m-0 p-0 d-flex align-items-center text-primary">
            <div class="col row">
                @if (invalidFormatSpeakerTime)
                {
                <div class="col alert alert-danger my-0 ml-0 mr-3" role="alert">
                    Formatfehler in der Sprecher Zeitangabe!
                </div>
                }
                @if(invalidFormatQuestionTime){
                <div class="col alert alert-danger my-0 mr-0 ml-3" role="alert">
                    Formatfehler in der Frage Zeitangabe!
                </div>
                }
            </div>
            <div class="col-5 col-md-2 d-flex justify-content-end">
                <i type="button" title="Lese Ansicht öffnen" class="fas fa-external-link-alt fa-lg p-2" @onclick="() => OpenReaderSpectatorView()"></i>
                <i type ="button" title="Redezeiten einstellen" class="fas fa-cog fa-lg p-2" @onclick="() => SpeakingTimeConfigModal.Open()"></i>
            </div>
        </div>
        <div class="card col-12 mx-0 mt-3 p-0">
            <div class="card-body row col-12 m-0 p-0">
                <div class="col-6 m-0 p-3 header-info">
                    <div class="row m-0 p-0 d-flex justify-content-between">
                        <div class="col p-0 m-0">
                            <div class="col-12">
                                <i class="fas fa-user-alt mr-2"></i>
                                @if (Speakerlist.CurrentSpeaker != null)
                                {
                                    @Speakerlist.CurrentSpeaker.Name
                                } else {
                                    <span>-</span>
                                }
                            </div>
                            <div class="col-12 hover-enabled">
                                <span type="button" class="py-2 text-danger" @onclick="() => this.Speakerlist.ClearCurrentSpeaker()"><i class="fas fa-trash mr-2"></i>Kopf leeren</span>
                            </div>
                        </div>
                        <div class="col-3 p-0">
                            <div class="col-12">
                                <h4 class="m-0 text-center @(Speakerlist.RemainingSpeakerTime.TotalSeconds < 11 ? "text-danger" : "")">
                                    @(Speakerlist.RemainingSpeakerTime.TotalSeconds < 0 ? "-" : "")
                                    @Speakerlist.RemainingSpeakerTime.ToString(@"mm\:ss")</h4>
                            </div>
                            <div class="col-12 hover-enabled">
                                <span type="button" class="p-2 text-success" @onclick="() => this.Speakerlist.AddSpeakerSeconds(10)">+10</span>
                                <span type="button" class="p-2 text-danger" @onclick="() => this.Speakerlist.AddSpeakerSeconds(-10)">-10</span>
                            </div>
                        </div>
                    </div>
                    <h5>Warteliste</h5>
                     @foreach (var speaker in Speakerlist.Speakers)
                        {
                            <div class="card border p-2">@speaker.Name</div>
                        }
                </div>
                <div class="col-6 m-0 p-3 header-info">
                    <div class="row m-0 p-0 d-flex justify-content-between">
                        <div class="col p-0 m-0">
                            <div class="col-12 text-primary">
                                <i class="fas fa-comment mr-2"></i>
                                @if (Speakerlist.CurrentQuestion != null)
                                {
                                    @Speakerlist.CurrentQuestion.Name
                                } else {
                                    <span>-</span>
                                }
                            </div>
                            <div class="col-12 hover-enabled">
                                <span type="button" class="py-2 text-danger" @onclick="() => this.Speakerlist.ClearCurrentQuestion()"><i class="fas fa-trash mr-2"></i>Kopf leeren</span>
                            </div>
                        </div>
                        <div class="col-3 p-0">
                            <div class="col-12">
                                <h4 class="m-0 text-center @(Speakerlist.RemainingQuestionTime.TotalSeconds < 11 ? "text-danger" : "")">
                                    @(Speakerlist.RemainingQuestionTime.TotalSeconds < 0 ? "-" : "")
                                    @Speakerlist.RemainingQuestionTime.ToString(@"mm\:ss")</h4>
                            </div>
                            <div class="col-12 hover-enabled">
                                <span type="button" class="p-2 text-success" @onclick="() => this.Speakerlist.AddQuestionSeconds(10)">+10</span>
                                <span type="button" class="p-2 text-danger" @onclick="() => this.Speakerlist.AddQuestionSeconds(-10)">-10</span>
                            </div>
                        </div>
                    </div>
                    <h5>Warteliste</h5>
                     @foreach (var question in Speakerlist.Questions)
                        {
                            <div class="card border p-2">@question.Name</div>
                        }
                </div>
            </div>
        </div>
    </div>

    <br>
    <br>
    <br>
    <br>
    <br>
    <br>

        <MUNityClient.Shared.Bootstrap.Modal Title="Sprechzeiten konfigurieren" @ref="SpeakingTimeConfigModal"
                                         OnSubmitCallback="SaveSettings">
            <EditForm Model="@Settings">
                <div class="form-group">
                    <label>Redezeit</label>
                    <InputText @bind-Value="Settings.Speakertime" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Zeit für Fragen, Kurzbemerkdungen und Antwort</label>
                    <InputText @bind-Value="Settings.Questiontime" class="form-control" />
                </div>
            </EditForm>
    </MUNityClient.Shared.Bootstrap.Modal>


    <div class="row">
        <div class="col-6">
            <div class="card border-primary">
                <div class="card-body">
                    Aktueller RednerIn
                    @if (Speakerlist.CurrentSpeaker != null)
                    {
                        <h4>@Speakerlist.CurrentSpeaker.Name</h4>
                        <h4>Verbleibende Redezeit</h4>

                        @if (Speakerlist.RemainingSpeakerTime.TotalSeconds > 10)
                        {
                            <h4>@Speakerlist.RemainingSpeakerTime.ToString(@"mm\:ss")</h4>
                        }
                        else if (Speakerlist.RemainingSpeakerTime.TotalSeconds <= 10 && Speakerlist.RemainingSpeakerTime.TotalSeconds >= 0)
                        {
                            <h4 class="text-danger">@Speakerlist.RemainingSpeakerTime.ToString(@"mm\:ss")</h4>
                        }
                        else
                        {
                            <h4 class="text-danger">Zeitüberschreitung um: @Speakerlist.RemainingSpeakerTime.ToString(@"mm\:ss")</h4>
                        }

                        <button class="btn btn-danger" @onclick="() => this.Speakerlist.ClearCurrentSpeaker()">Kopf leeren/Aktuelle(n) RednerIn entfernen</button>
                        <button class="btn btn-success" @onclick="() => this.Speakerlist.AddSpeakerSeconds(10)">+ 10 Sekunden</button>
                        <button class="btn btn-danger" @onclick="() => this.Speakerlist.AddSpeakerSeconds(-10)">- 10 Sekunden</button>
                    }
                    else
                    {
                        <h4>Niemand :(</h4>
                    }

                    <h3>Warteliste Redebeitrag</h3>

                    <ul>
                        @foreach (var speaker in Speakerlist.Speakers)
                        {
                            <li>@speaker.Name</li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="card border-secondary">
                <div class="card-body">
                    Aktuelle Frage/Kurzbemerkung
                    @if (Speakerlist.CurrentQuestion != null)
                    {
                        <h4>@Speakerlist.CurrentQuestion.Name</h4>
                        <h4>Verbleibende Zeit</h4>
                        <h4>@Speakerlist.RemainingQuestionTime.ToString(@"mm\:ss")</h4>
                        <button class="btn btn-danger" @onclick="() => this.Speakerlist.ClearCurrentQuestion()">Kopf leeren/Aktuelle(n) FragestellerIn entfernen</button>
                        <button class="btn btn-success" @onclick="() => this.Speakerlist.AddQuestionSeconds(10)">+ 10 Sekunden</button>
                        <button class="btn btn-danger" @onclick="() => this.Speakerlist.AddQuestionSeconds(-10)">- 10 Sekunden</button>
                    }
                    else
                    {
                        <h3>Niemand</h3>
                    }

                    <h3>Warteliste Fragen und Khhurzbemerkungen</h3>

                    <ul>
                        @foreach (var question in Speakerlist.Questions)
                        {
                            <li>@question.Name</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <hr />

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    Steuerung
                </div>
                <div class="card-body">
                    @* Zur Info: *@
                    @if (Speakerlist.Status == ListOfSpeakers.EStatus.Answer)
                    {
                        <div class="alert alert-primary">Der Redner antwortet auf die Frage</div>
                    }
                    else if (Speakerlist.Status == ListOfSpeakers.EStatus.AnswerPaused)
                    {
                        <div class="alert alert-primary">Die Antwort für den Redner wurde pausiert.</div>
                    }
                    else if (Speakerlist.Status == ListOfSpeakers.EStatus.Question)
                    {
                        <div class="alert alert-secondary">Es wird eine Frage gestellt</div>
                    }
                    else if (Speakerlist.Status == ListOfSpeakers.EStatus.QuestionPaused)
                    {
                        <div class="alert alert-secondary">Die Frage wurde pausiert.</div>
                    }
                    else if (Speakerlist.Status == ListOfSpeakers.EStatus.SpeakerPaused)
                    {
                        <div class="alert alert-primary">Der Redebeitrag wurde pausiert.</div>
                    }
                    else if (Speakerlist.Status == ListOfSpeakers.EStatus.Speaking)
                    {
                        <div class="alert alert-primary">Der Redebeitrag läuft</div>
                    }
                    else if (Speakerlist.Status == ListOfSpeakers.EStatus.Stopped)
                    {
                        <div class="alert alert-info">Die Redeliste wird gehalten.</div>
                    }

                    <button @onclick="() => Speakerlist.NextSpeaker()" class="btn btn-primary">Nächster Redner</button>
                    <button @onclick="() => Speakerlist.StartSpeaker()" class="btn btn-primary">Redezeit (neu)starten</button>
                    <button @onclick="() => Speakerlist.PauseSpeaker()" class="btn btn-primary">Redner pausieren</button>
                    <button @onclick="() => Speakerlist.ResumeSpeaker()" class="btn btn-primary">Redebeitrag Fortsetzen</button>
                    <button @onclick="() => Speakerlist.NextQuestion()" class="btn btn-secondary">Nächste Frage</button>
                    <button @onclick="() => Speakerlist.StartQuestion()" class="btn btn-secondary">Frage (neu)starten</button>
                    <button @onclick="() => Speakerlist.PauseQuestion()" class="btn btn-secondary">Frage pausieren</button>
                    <button @onclick="() => Speakerlist.ResumeQuestion()" class="btn btn-secondary">Frage fortsetzen</button>

                    @if (Speakerlist.ListClosed)
                    {
                        <button @onclick="() => Speakerlist.ListClosed = true" class="btn btn-success">Redeliste öffnen</button>
                    }
                    else
                    {
                        <button @onclick="() => Speakerlist.ListClosed = false" class="btn btn-danger">Redeliste schließen</button>
                    }

                    @if (Speakerlist.QuestionsClosed)
                    {
                        <button @onclick="() => Speakerlist.QuestionsClosed = true" class="btn btn-success">Fragen und Kurzbemerkungen öffnen</button>
                    }
                    else
                    {
                        <button @onclick="() => Speakerlist.QuestionsClosed = false" class="btn btn-danger">Fragen und Kurzbemerkungen schließen</button>
                    }


                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    Auf Liste setzen
                </div>
                <div class="card-body">
                    <EditForm Model="NewSpeaker">
                        <div class="form-group">
                            <label>Name</label>
                            <InputText @bind-Value="NewSpeaker.Name" class="form-control" />
                        </div>

                    </EditForm>

                    @if (!Speakerlist.ListClosed)
                    {
                        <button @onclick="() => AddToSpeakers()" class="btn btn-primary">Auf die Redeliste setzen</button>
                    }

                    @if (!Speakerlist.QuestionsClosed)
                    {
                        <button @onclick="() => AddToQuestions()" class="btn btn-secondary">Auf Fragen und Kurzbemerkungen setzen</button>
                    }

                </div>
            </div>
        </div>
    </div>


}

@code {
    [Parameter]
    public string Id { get; set; }

    public ListOfSpeakers Speakerlist { get; set; }

    private MUNityClient.Shared.Bootstrap.Modal SpeakingTimeConfigModal { get; set; }

    private class SpeakerToAdd
    {
        public string Iso { get; set; }

        public string Name { get; set; }
    }

    private class SpeakerlistSettings
    {
        public string Speakertime { get; set; }

        public string Questiontime { get; set; }

        public SpeakerlistSettings()
        {

        }

        public SpeakerlistSettings(ListOfSpeakers source)
        {
            Speakertime = source.SpeakerTime.ToString(@"mm\:ss");
            Questiontime = source.QuestionTime.ToString(@"mm\:ss");
        }
    }

    private SpeakerlistSettings Settings { get; set; }

    private SpeakerToAdd NewSpeaker = new SpeakerToAdd();

    private Boolean invalidFormatSpeakerTime = false;
    private Boolean invalidFormatQuestionTime = false;

    private void SaveSettings()
    {
        var speakerTime = Speakerlist.SpeakerTime;
        var questionTime = Speakerlist.QuestionTime;
        if (TimeSpan.TryParseExact(Settings.Speakertime, @"mm\:ss", null, out speakerTime))
        {
            invalidFormatSpeakerTime = false;
            invalidFormatQuestionTime = false;
            this.Speakerlist.SpeakerTime = speakerTime;
        }
        else
        {
            // Die Eingabe der Redezeit ist ungültig!
            invalidFormatSpeakerTime = true;
        }

        if (TimeSpan.TryParseExact(Settings.Questiontime, @"mm\:ss", null, out questionTime))
        {
            this.Speakerlist.QuestionTime = questionTime;
        }
        else
        {
            // Die Eingegebene Zeit für Fragen und Kurzbemerkungen ist ungültig.
            invalidFormatQuestionTime = true;
        }
    }

    private void TimerElapsed(object sender, ElapsedEventArgs args)
    {
        this.StateHasChanged();
    }

    private EventCallback AddToSpeakers()
    {
        this.Speakerlist.AddSpeaker(NewSpeaker.Name);
        NewSpeaker.Name = "";
        return EventCallback.Empty;
    }

    private EventCallback AddToQuestions()
    {
        this.Speakerlist.AddQuestion(NewSpeaker.Name);
        NewSpeaker.Name = "";
        return EventCallback.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        this.Speakerlist = await this.listOfSpeakerService.GetListOfSpeakers(this.Id);
        if (this.Speakerlist != null)
        {
            this.Settings = new SpeakerlistSettings(this.Speakerlist);

            // Wir bauen jetzt für den ersten Entwurf einen Timer, welcher
            // jede Sekunde neu Zeichnet. Der Grund dafür ist, dass die
            // Redeliste nicht selber mit einem Timer arbeitet sondern
            // Startzeiten mit der aktuellen Uhrzeit Synct und hierdurch
            // die Redezeiten berechnet.
            // Es ist theoretisch möglich sich von der Redeliste ein StateChanged Event geben zu lassen
            // dann kann der Timer pausiert werden, wenn ohnehin gerade niemand spricht, aber ich halte
            // eine aktualisierung der Ansicht (kein Serverping) nicht für zu viel. ~Peer
            var timer = new Timer(1000);
            timer.Elapsed += TimerElapsed;
            timer.Start();

            Speakerlist.ListChanged += StoreOnListChanged;

            base.OnInitialized();
        }
    }

    private async void StoreOnListChanged()
    {
        await this.listOfSpeakerService.StoreListOfSpeakers(this.Speakerlist);
    }

    private async Task OpenReaderSpectatorView()
    {
        // Das her ist auch mal ein beispiel, wie man eine JavaScript Methode schnell aufrufen kann :)
        string url = "/los/read/" + this.Speakerlist.ListOfSpeakersId;
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }
}


<style>
    .header-info .hover-enabled {
        transition: .3s ease;
        height: 0%;
        overflow-y: hidden;
    }

    .header-info:hover .hover-enabled {
        height: 60%;
    }
</style>
