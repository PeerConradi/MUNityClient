@page "/sim/run/{id}"

@inject Services.SimulationService simulationService;

@* A spectator role that cannot interact with the simulation but will be displayed
as spectator. For example press, spectators another committee that is visiting
this committee etc.
Spectator = 0

The chairman role that can edit the list of speakers and resolution and can interact
with requests of other roles.
Chairman = 1

a delegate role that is part of the committee.
Delegate = 2

A moderator role that can interact with all other users in this simulation by
having higher powers than any other role and is allowed to kick users.
Moderator = 3

A non government organization that has some ability to interact with the simulation
but not as much as a delegate (cant vote etc.)
Ngo = 4 *@


@if (_simulation != null && _auth != null)
{
    <div class="row col-12 m-0 p-0">
        <div class="col-8">
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        @* TODO: offline ausblenden *@
                        <div class="card-header p-0 row m-0 p-0">
                            <div type="button" class="header-item py-3 px-2 col @(currentTab == 0 ? "selected-tab" : "border")" @onclick="() => currentTab = 0">
                                @if (_auth.CanCreateRole && currentTab == 0)
                                {
                                    <i type="button" title="Gremium zurück in die Lobbyphase setzen" class="fas fa-lg fa-arrow-left text-danger mr-2" @onclick="() => BackToLobby()"></i>
                                }
                                Gremium
                            </div>
                            <div type="button" class="header-item border py-3 px-2 col @(currentTab == 1 ? "selected-tab" : "border")" @onclick="() => currentTab = 1">
                                Editor
                            </div>
                            <div type="button" class="header-item border py-3 px-2 col @(currentTab == 2 ? "selected-tab" : "border")" @onclick="() => currentTab = 2">
                                Reader
                            </div>
                        </div>
                        <div class="body">
                        @if (currentTab == 0)
                        {
                            @if (_userSetups.Where(usr => usr.RoleId == 1).Any())
                            {
                            <div class="row m-0 p-0 d-flex justify-content-center">
                                <div class="row m-0 p-0 col-12 d.flex justify-content-center">
                                    Vorsitz
                                </div>
                                <div class="row m-0 p-0 col-12">
                                @if (_auth.CanCreateRole && _userSetups != null)
                                {
                                    foreach (var user in _userSetups.Where(usr => usr.RoleId == 1))
                                    {
                                        <div class="col p-0 m-2">
                                            <MUNityClient.Shared.VirtualCommittee.SimulationLiveUserSetup User="user" Role="_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)"></MUNityClient.Shared.VirtualCommittee.SimulationLiveUserSetup>
                                        </div>
                                    }
                                }
                                else if (!_auth.CanCreateRole && _userItems != null)
                                {
                                    foreach (var user in _userItems)
                                    {
                                        <div class="col p-0 m-2">
                                            <MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase User="user" Role="_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)"></MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase>
                                        </div>
                                    }
                                }
                                </div>
                            </div>
                            }
                            @if (_userSetups.Where(usr => usr.RoleId == 2).Any())
                            {
                            <div class="row m-0 p-0 d-flex justify-content-center">
                                <div class="row m-0 p-0 col-12 d.flex justify-content-center">
                                    Delegierte
                                </div>
                                <div class="row m-0 p-0 col-12">
                                @if (_auth.CanCreateRole && _userSetups != null)
                                {
                                    @* .Where(usr => usr.RoleId == 2) *@
                                    foreach (var user in _userSetups)
                                    {
                                        <div class="col p-0 m-2">
                                            <MUNityClient.Shared.VirtualCommittee.SimulationLiveUserSetup User="user" Role="_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)"></MUNityClient.Shared.VirtualCommittee.SimulationLiveUserSetup>
                                        </div>
                                    }
                                }
                                else if (!_auth.CanCreateRole && _userItems != null)
                                {
                                    foreach (var user in _userItems)
                                    {
                                        <div class="col p-0 m-2">
                                            <MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase User="user" Role="_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)"></MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase>
                                        </div>
                                    }
                                }
                                </div>
                            </div>
                            }
                            @if (_userSetups.Where(usr => usr.RoleId == 4).Any())
                            {
                            <div class="row m-0 p-0 d-flex justify-content-center">
                                <div class="row m-0 p-0 col-12 d.flex justify-content-center">
                                    Nichtstaatliche Akteure
                                </div>
                                <div class="row m-0 p-0 col-12">
                                @if (_auth.CanCreateRole && _userSetups != null)
                                {
                                    @* .Where(usr => usr.RoleId == 4) *@
                                    foreach (var user in _userSetups)
                                    {
                                        <div class="col p-0 m-2">
                                            <MUNityClient.Shared.VirtualCommittee.SimulationLiveUserSetup User="user" Role="_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)"></MUNityClient.Shared.VirtualCommittee.SimulationLiveUserSetup>
                                        </div>
                                    }
                                }
                                else if (!_auth.CanCreateRole && _userItems != null)
                                {
                                    foreach (var user in _userItems)
                                    {
                                        <div class="col p-0 m-2">
                                            <MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase User="user" Role="_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)"></MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase>
                                        </div>
                                    }
                                }
                                </div>
                            </div>
                            }
                            @if (_userSetups.Where(usr => usr.RoleId == 3 || usr.RoleId == 0).Any())
                            {
                            <div class="row m-0 p-0 d-flex justify-content-center">
                                <div class="row m-0 p-0 col-12 d.flex justify-content-center">
                                    Sonstige
                                </div>
                                <div class="row m-0 p-0 col-12">
                                @if (_auth.CanCreateRole && _userSetups != null)
                                {
                                    @* Überhaupt anzeigen? *@
                                    @* .Where(usr => usr.RoleId == 3 || usr.RoleId == 0) *@
                                    foreach (var user in _userSetups)
                                    {
                                        <div class="col p-0 m-2">
                                            <MUNityClient.Shared.VirtualCommittee.SimulationLiveUserSetup User="user" Role="_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)"></MUNityClient.Shared.VirtualCommittee.SimulationLiveUserSetup>
                                        </div>
                                    }
                                }
                                else if (!_auth.CanCreateRole && _userItems != null)
                                {
                                    foreach (var user in _userItems)
                                    {
                                        <div class="col p-0 m-2">
                                            <MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase User="user" Role="_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)"></MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase>
                                        </div>
                                    }
                                }
                                </div>
                            </div>
                            }   
                        } else if (currentTab == 1)
                        {
                            <MUNityClient.Pages.Resa.ResolutionHome></MUNityClient.Pages.Resa.ResolutionHome>
                        } else if (currentTab == 2)
                        {
                            <MUNityClient.Pages.Resa.ResolutionPresentation></MUNityClient.Pages.Resa.ResolutionPresentation>
                        }
                        </div>
                    </div>
                </div>

                @if (!_auth.CanCreateRole)
                {
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">Steuerung</div>
                        <div class="card-body">
                                <div class="btn btn-primary" @onclick='() => MakeRequest("Redebeitrag")'>Antrag auf Redebeitrag</div>
                                <div class="btn btn-primary" @onclick='() => MakeRequest("Frage")'>Antrag auf Frage/Kurzbemerkung</div>
                                <div class="btn btn-primary" @onclick='() => MakeRequest("GO")'>Antrag an Geschäftsordnung</div>
                                <div class="btn btn-primary" @onclick='() => MakeRequest("Persoenlich")'>Persönlicher Antrag</div>
                        </div>
                    </div>
                </div>
                }
            </div>
        </div>

        <div class="col-4">
            <h1>Platzhalter für die Redeliste</h1>
        </div>
    </div>
}


@code {
    [Parameter]
    public string Id { get; set; }

    private MUNity.Schema.Simulation.SimulationResponse _simulation;

    private MUNity.Schema.Simulation.SimulationAuthSchema _auth;

    private List<MUNity.Schema.Simulation.SimulationUserItem> _userItems;

    private List<MUNity.Schema.Simulation.SimulationUserSetup> _userSetups;

    private Services.SocketHandlers.SimulationSocketHandler _socket;
    private int currentTab = 0;

    protected override async Task OnInitializedAsync()
    {
        int id = 0;
        if (int.TryParse(Id, out id))
        {
            this._simulation = await simulationService.GetSimulation(id);
            this._simulation.Roles = await simulationService.GetRoles(id);
            this._auth = await simulationService.GetMyAuth(id);
            _socket = await simulationService.Subscribe(id);
            AddHandlers(_socket);
            if (_auth.CanCreateRole)
            {
                this._userSetups = await simulationService.GetUserSetups(id);
            }
            else
            {
                this._userItems = (await simulationService.GetUsers(id)).ToList();
            }
            this.StateHasChanged();
        }
    }

    private async Task BackToLobby()
    {
        var response = await this.simulationService.SetPhase(this._simulation.SimulationId, (int)MUNity.Schema.Simulation.SimulationEnums.GamePhases.Lobby);
    }

    private void AddHandlers(Services.SocketHandlers.SimulationSocketHandler socket)
    {
        socket.UserRequest += UserRequest;
        socket.UserRequestAccpted += UserRequestAccepted;
        socket.UserRequestDeleted += UserRequestDeleted;
        socket.UserConnected += OnUserConnected;
        socket.UserDisconnected += OnUserDisconnected;
    }

    private void OnUserConnected(int sender, MUNity.Schema.Simulation.SimulationUserItem user)
    {
        if (_userItems != null)
        {
            var tmpUser = _userItems.FirstOrDefault(n => n.SimulationUserId == user.SimulationUserId);
            if (tmpUser != null)
            {
                tmpUser.IsOnline = true;
                tmpUser.DisplayName = user.DisplayName;
                this.StateHasChanged();
            }
        }

        if (_userSetups != null)
        {
            var tmpUser = _userSetups.FirstOrDefault(n => n.SimulationUserId == user.SimulationUserId);
            if (tmpUser != null)
            {
                tmpUser.IsOnline = true;
                tmpUser.DisplayName = user.DisplayName;
                this.StateHasChanged();
            }
        }
    }

    private void OnUserDisconnected(int sender, MUNity.Schema.Simulation.SimulationUserItem user)
    {
        if (_userItems != null)
        {
            var tmpUser = _userItems.FirstOrDefault(n => n.SimulationUserId == user.SimulationUserId);
            if (tmpUser != null)
            {
                tmpUser.IsOnline = false;
                this.StateHasChanged();
            }
        }

        if (_userSetups != null)
        {
            var tmpUser = _userSetups.FirstOrDefault(n => n.SimulationUserId == user.SimulationUserId);
            if (tmpUser != null)
            {
                tmpUser.IsOnline = false;
                this.StateHasChanged();
            }
        }
    }

    private void UserRequest(int sender, int userId, string request)
    {
        if (this._simulation == null) return;
        var user = this._simulation.Users.FirstOrDefault(n => n.SimulationUserId == userId);
        if (user == null) return;
        this.StateHasChanged();
    }

    private void UserRequestAccepted(int sender, int userId, string request)
    {
        if (this._simulation == null) return;
        var user = this._simulation.Users.FirstOrDefault(n => n.SimulationUserId == userId);
        if (user == null) return;
        this.StateHasChanged();
    }

    private void UserRequestDeleted(int sender, int userId, string request)
    {
        if (this._simulation == null) return;
        var user = this._simulation.Users.FirstOrDefault(n => n.SimulationUserId == userId);
        if (user == null) return;
        this.StateHasChanged();
    }

    private async Task MakeRequest(string request)
    {
        if (this._simulation == null) return;
        await this.simulationService.MakeRequest(this._simulation.SimulationId, request);
    }

    private async Task AcceptRequest(int userId, string request)
    {
        if (this._simulation == null) return;
        await this.simulationService.AcceptRequest(this._simulation.SimulationId, userId, request);
    }

    private async Task DeleteRequest(int userId, string request)
    {
        if (this._simulation == null) return;
        await this.simulationService.DeleteRequest(this._simulation.SimulationId, userId, request);
    }
}

<style>
    .header-item {
        transition: .3s;
    }

    .header-item:not(.selected-tab):hover {
        background-color: #dedede;
    }

    .selected-tab {
        background-color: #1266F1;
        color: white;
    }
</style>