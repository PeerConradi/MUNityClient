@page "/sim/run/{id}"

@inject Services.SimulationService simulationService;
@inject Services.ListOfSpeakerService listOfSpeakerService;
@inject NavigationManager navigationManager;
@*
    Der SimulationsRunner ist die "Schirmkomponente" über den Einzelnen Simulations Komponenten.
    An dieser Stelle wird eine Verbindung zum Server initialisiert und alle zum Start erforderlichen Daten
    werden einmal geladen.

    Zudem wird der Socket initialisiert und an die Sub-Komponenten welche diesen ggf. brauchen weiter gereicht.

    Diese Komponente soll auch das Basis Layout für das Simulationsfenster stellen.
*@


@if (_simulation != null && _auth != null)
{
    @if (_currentVoting != null)
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-primary">
                    <b>Aktive Abstimmung</b>
                    <span>@_currentVoting.Text</span>
                    <b>Stimmen: </b>
                    <div class="progress">
                        <div class="progress-bar"
                             role="progressbar"
                             style="width: @(_voteCounts * 100 / _currentVoting.AllowedUsers.Count)%"
                             aria-valuenow="@(_voteCounts * 100 / _currentVoting.AllowedUsers.Count)"
                             aria-valuemin="0"
                             aria-valuemax="100">
                            @_voteCounts/@_currentVoting.AllowedUsers.Count (@(_voteCounts * 100 / _currentVoting.AllowedUsers.Count)%)
                        </div>
                    </div>
                    <span>@_voteCounts / @_currentVoting.AllowedUsers.Count</span>
                    <b>Stimmverhältis:</b>
                    <div class="progress d-flex">
                        @if (_proVotes + _contraVotes > 0)
                        {
                            <div class="progress-bar bg-success" role="progressbar" style="width: @percentagePro%" aria-valuenow="@percentagePro" aria-valuemin="0" aria-valuemax="100"><span class="textInBar">@_proVotes/@_voteCounts (@percentagePro %)</span></div>
                        }

                        @if (_currentVoting.AllowAbstention && _voteCounts > 0)
                        {
                            <div class="progress-bar bg-primary" role="progressbar" style="width: @percentageAbstention%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"><span class="textInBar">@_abstentionVotes/@_voteCounts (@percentageAbstention%)</span></div>
                        }

                        @if (_currentVoting.AllowedUsers.Count - _voteCounts > 0)
                        {
                            <div class="progress-bar bg-dark" role="progressbar" style="width: @percentageMissing%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"><span class="textInBar">@(_currentVoting.AllowedUsers.Count - _voteCounts)</span></div>
                        }

                        @if (_proVotes + _contraVotes > 0)
                        {
                            <div class="progress-bar bg-danger" role="progressbar" style="width: @percentageContra%" aria-valuenow="@percentageContra" aria-valuemin="0" aria-valuemax="100"><span class="textInBar">@_contraVotes/@_voteCounts (@percentageContra %)</span></div>
                        }

                    </div>
                    <span class="text-success">Dafür @percentagePro %</span> <span class="text-danger">Dagegen @percentageContra %</span>
                </div>
            </div>
        </div>
    }

    <div class="row col-12 m-0 p-0">

        @* Ansicht des Gremiums/Reder für die Resolution und der Editor für die Resolution *@
        <div class="col-lg-8 col-md-8 col-sm-12">
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        @* TODO: offline ausblenden *@
                        <div class="card-header p-0 row m-0 p-0">
                            <div type="button" class="header-item py-3 px-2 col @(currentTab == 0 ? "selected-tab" : "border")" @onclick="() => currentTab = 0">
                                @if (_auth.CanCreateRole && currentTab == 0)
                                {
                                    <i type="button" title="Gremium zurück in die Lobbyphase setzen" class="fas fa-lg fa-arrow-left text-danger mr-2" @onclick="() => BackToLobby()"></i>
                                }
                                Gremium
                                @if (this._myRole != null)
                                {
                                    <span>@this._myRole.Name</span>
                                }
                            </div>
                            <div type="button" class="header-item border py-3 px-2 col @(currentTab == 1 ? "selected-tab" : "border")" @onclick="() => currentTab = 1">
                                Editor
                            </div>
                            <div type="button" class="header-item border py-3 px-2 col @(currentTab == 2 ? "selected-tab" : "border")" @onclick="() => currentTab = 2">
                                Reader
                            </div>
                        </div>
                        <div class="body">
                            @if (currentTab == 0)
                            {
                                <MUNityClient.Shared.VirtualCommittee.SimulationCommitteeView Users="@_users"
                                                                                              Simulation="@_simulation"
                                                                                              Socket="@_socket"
                                                                                              Auth="@_auth"
                                                                                              MyRole="@_myRole"></MUNityClient.Shared.VirtualCommittee.SimulationCommitteeView>
                            }
                            else if (currentTab == 1)
                            {
                                <MUNityClient.Pages.Resa.ResolutionHome></MUNityClient.Pages.Resa.ResolutionHome>
                            }
                            else if (currentTab == 2)
                            {
                                <MUNityClient.Pages.Resa.ResolutionPresentation></MUNityClient.Pages.Resa.ResolutionPresentation>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @* Ansicht für die Redeliste *@
        <div class="col-md-4 col-lg-4 col-sm-12">
            @if (_listOfSpeakerId == "_loading_")
            {
                <p>Redeliste wird abgerufen...</p>
            }
            else if (string.IsNullOrEmpty(_listOfSpeakerId))
            {
                if (_auth.CanCreateRole || _myRole.RoleType == MUNity.Schema.Simulation.SimulationEnums.RoleTypes.Chairman)
                {
                    <button class="btn btn-success" @onclick="() => InitListOfSpeakers()">Redeliste anlegen</button>
                }
                else
                {
                    <p>Keine Redeliste vorhanden.</p>
                }
            }
            else
            {
                if (_auth.CanCreateRole || _myRole.RoleType == MUNity.Schema.Simulation.SimulationEnums.RoleTypes.Chairman)
                {
                    <span>@_listOfSpeakerId</span>
                }
                <MUNityClient.Shared.Los.LoSReaderComponent ListOfSpeakersId="@_listOfSpeakerId" IsOnline="true"></MUNityClient.Shared.Los.LoSReaderComponent>
            }
        </div>
    </div>

    @* Ansicht für die Steuerung *@
    <div class="row m-0 p-0">
        <div class="col-12">
            <MUNityClient.Shared.VirtualCommittee.SimulationControls Me="@_users.FirstOrDefault(n => n.SimulationUserId == _auth.SimulationUserId)"
                                                                     SimulationId="@_simulation.SimulationId"
                                                                     SpeakerlistId="@_listOfSpeakerId"
                                                                     Role="@_myRole"
                                                                     Socket="@_socket"
                                                                     Users="@_users"
                                                                     Roles="@_simulation.Roles"></MUNityClient.Shared.VirtualCommittee.SimulationControls>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private MUNity.Schema.Simulation.SimulationResponse _simulation;

    private MUNity.Schema.Simulation.SimulationAuthSchema _auth;

    private List<MUNity.Schema.Simulation.IUserItem> _users = new List<MUNity.Schema.Simulation.IUserItem>();

    private Services.SocketHandlers.SimulationSocketHandler _socket;
    private int currentTab = 0;

    private MUNity.Schema.Simulation.SimulationRoleItem _myRole;

    private string _listOfSpeakerId = "_loading_";

    private MUNity.Schema.Simulation.CreatedVoteModel _currentVoting { get; set; } = null;

    private int _voteCounts { get; set; } = 0;

    private int _proVotes { get; set; } = 0;

    private int _contraVotes { get; set; } = 0;

    private int _abstentionVotes { get; set; } = 0;

    private int percentageMissing => (_currentVoting.AllowedUsers.Count - _voteCounts) / _currentVoting.AllowedUsers.Count * 100;

    private int percentagePro => (_proVotes + _contraVotes) > 0 ? (_proVotes * 100 / (_proVotes + _contraVotes)) : 0;

    private int percentageContra => (_proVotes + _contraVotes) > 0 ? (_contraVotes * 100 /(_proVotes + _contraVotes) ) : 0;

    private int percentageAbstention => _voteCounts > 0 ? (_abstentionVotes * 100 /_voteCounts) : 0;


    protected override async Task OnInitializedAsync()
    {
        int id = 0;
        if (int.TryParse(Id, out id))
        {
            this._simulation = await simulationService.GetSimulation(id);
            this._simulation.Roles = await simulationService.GetRoles(id);
            this._auth = await simulationService.GetMyAuth(id);

            _socket = await simulationService.Subscribe(id);
            AddHandlers(_socket);
            if (_auth.CanCreateRole)
            {
                var tmpUsers = await simulationService.GetUserSetups(id);
                this._users.AddRange(tmpUsers);
                int roleId = this._users.FirstOrDefault(n => n.SimulationUserId == _auth.SimulationUserId)?.RoleId ?? -2;
                this._myRole = this._simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == roleId);
            }
            else
            {
                var tmpUsers = (await simulationService.GetUsers(id)).ToList();
                this._users.AddRange(tmpUsers);
                int roleId = this._users.FirstOrDefault(n => n.SimulationUserId == _auth.SimulationUserId)?.RoleId ?? -2;
                this._myRole = this._simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == roleId);
            }

            this._listOfSpeakerId = await this.simulationService.GetListOfSpeakerId(id);


            this.StateHasChanged();
        }
    }

    private async Task BackToLobby()
    {
        var response = await this.simulationService.SetPhase(this._simulation.SimulationId, (int)MUNity.Schema.Simulation.SimulationEnums.GamePhases.Lobby);
    }

    private void AddHandlers(Services.SocketHandlers.SimulationSocketHandler socket)
    {
        socket.UserConnected += OnUserConnected;
        socket.UserDisconnected += OnUserDisconnected;
        socket.PhaseChanged += OnPhaseChanged;
        socket.VoteCreated += VoteCreated;
        socket.UserVoted += UserVoted;
    }

    private void VoteCreated(object sender, MUNity.Schema.Simulation.CreatedVoteModel args)
    {
        this._currentVoting = args;
        this._voteCounts = 0;
        this._proVotes = 0;
        this._contraVotes = 0;
        this._abstentionVotes = 0;
        this.StateHasChanged();
    }

    private void UserVoted(object sender, MUNity.Schema.Simulation.VotedEventArgs args)
    {
        Console.WriteLine("Vote incoming!");
        if (args.VoteId == _currentVoting.CreatedVoteModelId)
        {
            _voteCounts += 1;
            if (args.Choice == 0) _proVotes += 1;
            else if (args.Choice == 1) _contraVotes += 1;
            else if (args.Choice == 2) _abstentionVotes += 1;
            this.StateHasChanged();
        }
    }

    private void OnPhaseChanged(int sender, MUNity.Schema.Simulation.SimulationEnums.GamePhases phase)
    {
        if (phase == MUNity.Schema.Simulation.SimulationEnums.GamePhases.Lobby)
        {
            navigationManager.NavigateTo($"/sim/lobby/{Id}");
        }
    }

    private void OnUserConnected(int sender, MUNity.Schema.Simulation.SimulationUserItem user)
    {
        if (_users != null)
        {
            var tmpUser = _users.FirstOrDefault(n => n.SimulationUserId == user.SimulationUserId);
            if (tmpUser != null)
            {
                tmpUser.IsOnline = true;
                tmpUser.DisplayName = user.DisplayName;
                this.StateHasChanged();
            }
        }
    }

    private void OnUserDisconnected(int sender, MUNity.Schema.Simulation.SimulationUserItem user)
    {
        if (_users != null)
        {
            var tmpUser = _users.FirstOrDefault(n => n.SimulationUserId == user.SimulationUserId);
            if (tmpUser != null)
            {
                tmpUser.IsOnline = false;
                this.StateHasChanged();
            }
        }
    }

    private async void InitListOfSpeakers()
    {
        if (this._simulation != null)
        {
            var list = await this.simulationService.InitListOfSpeakers(this._simulation.SimulationId);
            if (list != null)
            {
                this._listOfSpeakerId = list.ListOfSpeakersId;
                this.StateHasChanged();
            }
        }
    }



}

<style>
    .header-item {
        transition: .3s;
    }

        .header-item:not(.selected-tab):hover {
            background-color: #dedede;
        }

    .selected-tab {
        background-color: #1266F1;
        color: white;
    }
</style>