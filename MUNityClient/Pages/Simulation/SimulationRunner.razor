@page "/sim/run/{id}"

@inject Services.SimulationService simulationService;

@if (_simulation != null && _auth != null)
{
    <div class="row">
        <div class="col-8">
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                        Gremiumansicht @if (this._myRole != null)
                        {
                            <span>@this._myRole.Name</span>
                        }
                        </div>
                        <div class="body">
                            <div class="row">
                                @if (_auth.CanCreateRole && _userSetups != null)
                                {
                                    foreach (var user in _userSetups)
                                    {
                                        <MUNityClient.Shared.VirtualCommittee.SimulationLiveUserSetup User="user" Role="_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)" SocketHandler="this._socket"></MUNityClient.Shared.VirtualCommittee.SimulationLiveUserSetup>
                                    }
                                }
                                else if (!_auth.CanCreateRole && _userItems != null)
                                {
                                    foreach (var user in _userItems)
                                    {
                                        <MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase User="user"
                                                                                                     Role="_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)"
                                                                                                     SocketHandler="this._socket"
                                                                                                     IsMe="@(_auth.SimulationUserId == user.SimulationUserId)"></MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-12">
                    <div class="card">
                        <div class="card-header">Steuerung</div>
                        <div class="card-body">
                            @if (_myRole != null)
                            {
                                @* Funktionen für Delegierte und Ngo Vertreter *@
                                if (_myRole.RoleType == MUNity.Schema.Simulation.SimulationEnums.RoleTypes.Delegate || _myRole.RoleType == MUNity.Schema.Simulation.SimulationEnums.RoleTypes.Ngo)
                                {
                                    <div class="btn btn-secondary" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.PersRechtAufInformation)'>Recht auf Information</div>
                                    <div class="btn btn-secondary" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.PersRechtAufOrdnung)'>Recht auf Wiederherstellung der Ordnung</div>
                                    <div class="btn btn-secondary" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.PersRechtAufKlaerung)'>Recht auf Klärung eines Missverständnisses</div>

                                    <div class="btn btn-primary" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOMuendlicheAbstimmung)'>mündliche Abstimmung</div>
                                    <div class="btn btn-primary" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOInformelleSitzung)'>Informelle Sitzung</div>
                                }

                                @* Funktionen nur für Delegierte *@
                                if (_myRole.RoleType == MUNity.Schema.Simulation.SimulationEnums.RoleTypes.Delegate)
                                {
                                    <div class="btn btn-primary" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GORevision)'>Revision einer Entscheidung des Vorsitzes</div>
                                    <div class="btn btn-primary" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GONeuTagesordnungspunkt)'>Aufnahme eines neuen Tagesordnungspunktes</div>
                                    <div class="btn btn-primary" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOZurueckResolutionsentwurf)'>Zurückschicken eines Resolutionsentwurfes</div>
                                    <div class="btn btn-primary" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOVertagung)'>Vertagung eines Tagesordnungspunktes</div>
                                    <div class="btn btn-primary" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GORueckAllgDebatte)'>Rückkehr zur Allgemeinen Debatte</div>
                                    <div class="btn btn-primary" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOEndeDebatte)'>Ende der aktuellen Debatte</div>
                                    <div class="btn btn-primary" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOVorgezogenAbstReso)'>Vorgezogene Abstimmung über den Resolutionsentwurf als Ganzes</div>
                                    <div class="btn btn-primary" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOAbschlussRedeliste)'>Abschluss oder Wiedereröffnung der Redeliste</div>
                                    <div class="btn btn-primary" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOAendereRedezeit)'>Änderung der Redezeit</div>
                                    <div class="btn btn-primary" @onclick='() => MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes.GOGastredner)'>Anhörung eines Gastredners</div>
                                }
                            }

                            @* Funktionen nur für Admins *@
                            @if (_auth.CanCreateRole)
                            {
                                <div class="btn btn-danger" @onclick='() => BackToLobby()'>Zurück in die Lobby</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-4">
            <h1>Platzhalter für die Redeliste</h1>
        </div>
    </div>
}


@code {
    [Parameter]
    public string Id { get; set; }

    private MUNity.Schema.Simulation.SimulationResponse _simulation;

    private MUNity.Schema.Simulation.SimulationAuthSchema _auth;

    private List<MUNity.Schema.Simulation.SimulationUserItem> _userItems;

    private List<MUNity.Schema.Simulation.SimulationUserSetup> _userSetups;

    private Services.SocketHandlers.SimulationSocketHandler _socket;

    private MUNity.Schema.Simulation.SimulationRoleItem _myRole;

    protected override async Task OnInitializedAsync()
    {
        int id = 0;
        if (int.TryParse(Id, out id))
        {
            this._simulation = await simulationService.GetSimulation(id);
            this._simulation.Roles = await simulationService.GetRoles(id);
            this._auth = await simulationService.GetMyAuth(id);

            _socket = await simulationService.Subscribe(id);
            AddHandlers(_socket);
            if (_auth.CanCreateRole)
            {
                this._userSetups = await simulationService.GetUserSetups(id);
                int roleId = this._userSetups.FirstOrDefault(n => n.SimulationUserId == _auth.SimulationUserId)?.RoleId ?? -2;
                this._myRole = this._simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == roleId);
            }
            else
            {
                this._userItems = (await simulationService.GetUsers(id)).ToList();
                int roleId = this._userItems.FirstOrDefault(n => n.SimulationUserId == _auth.SimulationUserId)?.RoleId ?? -2;
                this._myRole = this._simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == roleId);
            }
            this.StateHasChanged();
        }
    }

    private async Task BackToLobby()
    {
        var response = await this.simulationService.SetPhase(this._simulation.SimulationId, (int)MUNity.Schema.Simulation.SimulationEnums.GamePhases.Lobby);
    }

    private void AddHandlers(Services.SocketHandlers.SimulationSocketHandler socket)
    {
        socket.UserConnected += OnUserConnected;
        socket.UserDisconnected += OnUserDisconnected;
    }

    private void OnUserConnected(int sender, MUNity.Schema.Simulation.SimulationUserItem user)
    {
        if (_userItems != null)
        {
            var tmpUser = _userItems.FirstOrDefault(n => n.SimulationUserId == user.SimulationUserId);
            if (tmpUser != null)
            {
                tmpUser.IsOnline = true;
                tmpUser.DisplayName = user.DisplayName;
                this.StateHasChanged();
            }
        }

        if (_userSetups != null)
        {
            var tmpUser = _userSetups.FirstOrDefault(n => n.SimulationUserId == user.SimulationUserId);
            if (tmpUser != null)
            {
                tmpUser.IsOnline = true;
                tmpUser.DisplayName = user.DisplayName;
                this.StateHasChanged();
            }
        }
    }

    private void OnUserDisconnected(int sender, MUNity.Schema.Simulation.SimulationUserItem user)
    {
        if (_userItems != null)
        {
            var tmpUser = _userItems.FirstOrDefault(n => n.SimulationUserId == user.SimulationUserId);
            if (tmpUser != null)
            {
                tmpUser.IsOnline = false;
                this.StateHasChanged();
            }
        }

        if (_userSetups != null)
        {
            var tmpUser = _userSetups.FirstOrDefault(n => n.SimulationUserId == user.SimulationUserId);
            if (tmpUser != null)
            {
                tmpUser.IsOnline = false;
                this.StateHasChanged();
            }
        }
    }

    private void UserRequest(int sender, int userId, string request)
    {
        if (this._simulation == null) return;
        var user = this._simulation.Users.FirstOrDefault(n => n.SimulationUserId == userId);
        if (user == null) return;
        this.StateHasChanged();
    }

    private void UserRequestAccepted(int sender, int userId, string request)
    {
        if (this._simulation == null) return;
        var user = this._simulation.Users.FirstOrDefault(n => n.SimulationUserId == userId);
        if (user == null) return;
        this.StateHasChanged();
    }

    private void UserRequestDeleted(int sender, int userId, string request)
    {
        if (this._simulation == null) return;
        var user = this._simulation.Users.FirstOrDefault(n => n.SimulationUserId == userId);
        if (user == null) return;
        this.StateHasChanged();
    }

    private async Task MakePetition(MUNity.Schema.Simulation.Petition.PetitionTypes type)
    {
        if (this._simulation == null) return;
        var petition = new MUNity.Schema.Simulation.Petition();
        petition.SimulationId = this._simulation.SimulationId;
        petition.Text = "";
        petition.PetitionType = type;
        await this.simulationService.MakePetition(petition);
    }

}
