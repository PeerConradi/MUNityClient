@page "/sim/run/{id}"

@inject Services.SimulationService simulationService;
@inject Services.ListOfSpeakerService listOfSpeakerService;

@*
        Die Virtuellen Gremien bestehen aus SimulationUsers, welche dieser entweder mit oder ohne eine Rolle (SimulationRole) beitreten.
        Es gibt fünf Arten von Rollen:

        A spectator role that cannot interact with the simulation but will be displayed
    as spectator. For example press, spectators another committee that is visiting
    this committee etc.
    Spectator = 0

    The chairman role that can edit the list of speakers and resolution and can interact
    with requests of other roles.
    Chairman = 1

    a delegate role that is part of the committee.
    Delegate = 2

    A moderator role that can interact with all other users in this simulation by
    having higher powers than any other role and is allowed to kick users.
    Moderator = 3

    A non government organization that has some ability to interact with the simulation
    but not as much as a delegate (cant vote etc.)
    Ngo = 4


*@


@if (_simulation != null && _auth != null)
{
    <div class="row col-12 m-0 p-0">
        <div class="col-8">
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        @* TODO: offline ausblenden *@
                        <div class="card-header p-0 row m-0 p-0">
                            <div type="button" class="header-item py-3 px-2 col @(currentTab == 0 ? "selected-tab" : "border")" @onclick="() => currentTab = 0">
                                @if (_auth.CanCreateRole && currentTab == 0)
                                {
                                    <i type="button" title="Gremium zurück in die Lobbyphase setzen" class="fas fa-lg fa-arrow-left text-danger mr-2" @onclick="() => BackToLobby()"></i>
                                }
                                Gremium
                                @if (this._myRole != null)
                                {
                                    <span>@this._myRole.Name</span>
                                }
                            </div>
                            <div type="button" class="header-item border py-3 px-2 col @(currentTab == 1 ? "selected-tab" : "border")" @onclick="() => currentTab = 1">
                                Editor
                            </div>
                            <div type="button" class="header-item border py-3 px-2 col @(currentTab == 2 ? "selected-tab" : "border")" @onclick="() => currentTab = 2">
                                Reader
                            </div>
                        </div>
                        <div class="body">
                            @if (currentTab == 0)
                            {
                                @if (HasChairs)
                                {
                                    <div class="row m-0 p-0 d-flex justify-content-center">
                                        <div class="row m-0 p-0 col-12 d.flex justify-content-center">
                                            Vorsitz
                                        </div>
                                        <div class="row m-0 p-0 col-12">
                                            @foreach (var user in Chairs)
                                            {
                                                <div class="col p-0 m-2">
                                                    <MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase User="user"
                                                                                                                    Role="_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)"
                                                                                                                    SocketHandler="this._socket"
                                                                                                                    IsMe="@(_auth.SimulationUserId == user.SimulationUserId)"></MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                @if (HasDelegates)
                                {
                                    <div class="row m-0 p-0 d-flex justify-content-center">
                                        <div class="row m-0 p-0 col-12 d.flex justify-content-center">
                                            Delegierte
                                        </div>
                                        <div class="row m-0 p-0 col-12">
                                            @foreach (var user in Delegates)
                                            {
                                                <div class="col p-0 m-2">
                                                    <MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase User="user"
                                                                                                                    Role="_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)"
                                                                                                                    SocketHandler="this._socket"
                                                                                                                    IsMe="@(_auth.SimulationUserId == user.SimulationUserId)"></MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                <!--@if (_userSetups.Where(usr => usr.RoleId == 4).Any())
                                {
                                    <div class="row m-0 p-0 d-flex justify-content-center">
                                        <div class="row m-0 p-0 col-12 d.flex justify-content-center">
                                            Nichtstaatliche Akteure
                                        </div>
                                        <div class="row m-0 p-0 col-12">
                                            @if (_auth.CanCreateRole && _userSetups != null)
                                            {-->
                                                @* .Where(usr => usr.RoleId == 4) *@
                                            <!--foreach (var user in _userSetups)
                                            {
                                                    <div class="col p-0 m-2">
                                                        <MUNityClient.Shared.VirtualCommittee.SimulationLiveUserSetup User="user" Role="_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)" SocketHandler="this._socket"></MUNityClient.Shared.VirtualCommittee.SimulationLiveUserSetup>
                                                    </div>
                                                }
                                            }
                                            else if (!_auth.CanCreateRole && _userItems != null)
                                            {
                                                foreach (var user in _userItems)
                                                {
                                                    <div class="col p-0 m-2">
                                                        <MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase User="user"
                                                                                                                     Role="_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)"
                                                                                                                     SocketHandler="this._socket"
                                                                                                                     IsMe="@(_auth.SimulationUserId == user.SimulationUserId)"></MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                                @if (_userSetups.Where(usr => usr.RoleId == 3 || usr.RoleId == 0).Any())
                                {
                                    <div class="row m-0 p-0 d-flex justify-content-center">
                                        <div class="row m-0 p-0 col-12 d.flex justify-content-center">
                                            Sonstige
                                        </div>
                                        <div class="row m-0 p-0 col-12">
                                            @if (_auth.CanCreateRole && _userSetups != null)
                                            {
                                            foreach (var user in _userSetups)
                                            {
                                                    <div class="col p-0 m-2">
                                                        <MUNityClient.Shared.VirtualCommittee.SimulationLiveUserSetup User="user" Role="_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)" SocketHandler="this._socket"></MUNityClient.Shared.VirtualCommittee.SimulationLiveUserSetup>
                                                    </div>
                                                }
                                            }
                                            else if (!_auth.CanCreateRole && _userItems != null)
                                            {
                                                foreach (var user in _userItems)
                                                {
                                                    <div class="col p-0 m-2">
                                                        <MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase User="user"
                                                                                                                     Role="_simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == user.RoleId)"
                                                                                                                     SocketHandler="this._socket"
                                                                                                                     IsMe="@(_auth.SimulationUserId == user.SimulationUserId)"></MUNityClient.Shared.VirtualCommittee.SimulationLiveUserBase>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                }-->
                            }
                            else if (currentTab == 1)
                            {
                                <MUNityClient.Pages.Resa.ResolutionHome></MUNityClient.Pages.Resa.ResolutionHome>
                            }
                            else if (currentTab == 2)
                            {
                                <MUNityClient.Pages.Resa.ResolutionPresentation></MUNityClient.Pages.Resa.ResolutionPresentation>
                            }
                        </div>
                    </div>
                </div>

                <div class="col-12">
                    <div class="card">
                        <div class="card-header">Steuerung</div>
                        <div class="card-body">
                            <MUNityClient.Shared.VirtualCommittee.SimulationControls Me="@_users.FirstOrDefault(n => n.SimulationUserId == _auth.SimulationUserId)"
                                                                                        SimulationId="@_simulation.SimulationId"
                                                                                        SpeakerlistId="@_listOfSpeakerId"
                                                                                        Role="@_myRole"></MUNityClient.Shared.VirtualCommittee.SimulationControls>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-4">
            @if (_listOfSpeakerId == "_loading_")
            {
                <p>Redeliste wird abgerufen...</p>
            }
            else if (string.IsNullOrEmpty(_listOfSpeakerId))
            {
                if (_auth.CanCreateRole || _myRole.RoleType == MUNity.Schema.Simulation.SimulationEnums.RoleTypes.Chairman)
                {
                    <button class="btn btn-success" @onclick="() => InitListOfSpeakers()">Redeliste anlegen</button>
                }
                else
                {
                    <p>Keine Redeliste vorhanden.</p>
                }
            }
            else
            {
                if (_auth.CanCreateRole || _myRole.RoleType == MUNity.Schema.Simulation.SimulationEnums.RoleTypes.Chairman)
                {
                    <span>@_listOfSpeakerId</span>
                }
                <MUNityClient.Shared.Los.LoSReaderComponent ListOfSpeakersId="@_listOfSpeakerId" IsOnline="true"></MUNityClient.Shared.Los.LoSReaderComponent>
            }
        </div>
    </div>
}


@code {
    [Parameter]
    public string Id { get; set; }

    private MUNity.Schema.Simulation.SimulationResponse _simulation;

    private MUNity.Schema.Simulation.SimulationAuthSchema _auth;

    private List<MUNity.Schema.Simulation.IUserItem> _users = new List<MUNity.Schema.Simulation.IUserItem>();

    private Services.SocketHandlers.SimulationSocketHandler _socket;
    private int currentTab = 0;

    private MUNity.Schema.Simulation.SimulationRoleItem _myRole;

    private string _listOfSpeakerId = "_loading_";

    public bool HasChairs
    {
        get
        {
            if (this._users == null) return false;
            return this._users.Any(n => this._simulation.Roles.Any(a => a.RoleType == MUNity.Schema.Simulation.SimulationEnums.RoleTypes.Chairman && a.SimulationRoleId == n.RoleId));
        }
    }

    public bool HasDelegates
    {
        get
        {
            if (this._users == null) return false;
            return this._users.Any(n => this._simulation.Roles.Any(a => a.RoleType == MUNity.Schema.Simulation.SimulationEnums.RoleTypes.Delegate && a.SimulationRoleId == n.RoleId));
        }
    }

    public IEnumerable<MUNity.Schema.Simulation.IUserItem> Chairs
    {
        get
        {
            return this._users.Where(n => this._simulation.Roles.Any(a => a.RoleType == MUNity.Schema.Simulation.SimulationEnums.RoleTypes.Chairman && a.SimulationRoleId == n.RoleId));
        }
    }

    public IEnumerable<MUNity.Schema.Simulation.IUserItem> Delegates
    {
        get
        {
            return this._users.Where(n => this._simulation.Roles.Any(a => a.RoleType == MUNity.Schema.Simulation.SimulationEnums.RoleTypes.Delegate && a.SimulationRoleId == n.RoleId));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        int id = 0;
        if (int.TryParse(Id, out id))
        {
            this._simulation = await simulationService.GetSimulation(id);
            this._simulation.Roles = await simulationService.GetRoles(id);
            this._auth = await simulationService.GetMyAuth(id);

            _socket = await simulationService.Subscribe(id);
            AddHandlers(_socket);
            if (_auth.CanCreateRole)
            {
                var tmpUsers = await simulationService.GetUserSetups(id);
                this._users.AddRange(tmpUsers);
                int roleId = this._users.FirstOrDefault(n => n.SimulationUserId == _auth.SimulationUserId)?.RoleId ?? -2;
                this._myRole = this._simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == roleId);
            }
            else
            {
                var tmpUsers = (await simulationService.GetUsers(id)).ToList();
                this._users.AddRange(tmpUsers);
                int roleId = this._users.FirstOrDefault(n => n.SimulationUserId == _auth.SimulationUserId)?.RoleId ?? -2;
                this._myRole = this._simulation.Roles.FirstOrDefault(n => n.SimulationRoleId == roleId);
            }

            this._listOfSpeakerId = await this.simulationService.GetListOfSpeakerId(id);


            this.StateHasChanged();
        }
    }

    private async Task BackToLobby()
    {
        var response = await this.simulationService.SetPhase(this._simulation.SimulationId, (int)MUNity.Schema.Simulation.SimulationEnums.GamePhases.Lobby);
    }

    private void AddHandlers(Services.SocketHandlers.SimulationSocketHandler socket)
    {
        socket.UserConnected += OnUserConnected;
        socket.UserDisconnected += OnUserDisconnected;
    }

    private void OnUserConnected(int sender, MUNity.Schema.Simulation.SimulationUserItem user)
    {
        if (_users != null)
        {
            var tmpUser = _users.FirstOrDefault(n => n.SimulationUserId == user.SimulationUserId);
            if (tmpUser != null)
            {
                tmpUser.IsOnline = true;
                tmpUser.DisplayName = user.DisplayName;
                this.StateHasChanged();
            }
        }
    }

    private void OnUserDisconnected(int sender, MUNity.Schema.Simulation.SimulationUserItem user)
    {
        if (_users != null)
        {
            var tmpUser = _users.FirstOrDefault(n => n.SimulationUserId == user.SimulationUserId);
            if (tmpUser != null)
            {
                tmpUser.IsOnline = false;
                this.StateHasChanged();
            }
        }
    }

    private async void InitListOfSpeakers()
    {
        if (this._simulation != null)
        {
            var list = await this.simulationService.InitListOfSpeakers(this._simulation.SimulationId);
            if (list != null)
            {
                this._listOfSpeakerId = list.ListOfSpeakersId;
                this.StateHasChanged();
            }
        }
    }

    

}

<style>
    .header-item {
        transition: .3s;
    }

        .header-item:not(.selected-tab):hover {
            background-color: #dedede;
        }

    .selected-tab {
        background-color: #1266F1;
        color: white;
    }
</style>
