@page "/sim/home"

@inject Services.SimulationService simulationService;
@inject NavigationManager navigation;

@if (_connectionState == ConnectionStates.Connected)
{
    @* Erstellen *@
    <div class="row">
        <div class="col-4">
            <div class="card">
                <div class="card-body">
                    <MUNityClient.Shared.VirtualCommittee.CreateVirtualCommittee></MUNityClient.Shared.VirtualCommittee.CreateVirtualCommittee>
                </div>
            </div>
        </div>
        <div class="col-8">
            <div class="card">
                <div class="card-header">
                    Simulationen
                </div>
                <div class="card-body">
                    @if (_simulations != null)
                    {
                        if (_simulations.Any())
                        {
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Mit Passwort</th>
                                        <th>Status/Phase</th>
                                        <th>Beitreten</th>
                                        <th>Verwaltung</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var simulation in this._simulations)
                                    {
                                    <tr>
                                        <td>@simulation.Name</td>
                                        <td>@simulation.UsingPassword.ToString()</td>

                                        @if (simulation.Phase == MUNity.Schema.Simulation.SimulationEnums.GamePhases.Lobby)
                                        {
                                            <td>Vorbereitungsphase</td>
                                        }
                                        else if (simulation.Phase == MUNity.Schema.Simulation.SimulationEnums.GamePhases.Online)
                                        {
                                            <td>Aktiv</td>
                                        }
                                        else if (simulation.Phase == MUNity.Schema.Simulation.SimulationEnums.GamePhases.Offline)
                                        {
                                            <td>Offline</td>
                                        }
                                        <td><button class="btn btn-small btn-success" @onclick="() => EnterSimulation(simulation.SimulationId)">Beitreten</button><small>Mit einer Id und Passwort</small></td>
                                        <td><button class="btn btn-small btn-info">Verwaltung</button><small>Beitritt mit dem Admin Passwort</small></td>
                                    </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p>Keine Simulationen gefunden :(</p>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    @* Simulationen aus den Tokens (ignorieren wird erst einmal denn wir rufen ja alle existierenden Lobbies ab. *@
    @*@if (_tokens != null)
        {
            <h1>Gespeicherte Sessions</h1>
            <div class="row">
                <div class="col-12">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Beitreten</th>
                                <th>Entfernen</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var token in _tokens)
                            {
                                <tr>
                                    <td>@token.Name</td>
                                    <td><button class="btn btn-small btn-success" @onclick="() => EnterSimulation(token.SimulationId)">Beitreten</button></td>
                                    <td><button class="btn btn-small btn-danger">Entfernen</button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }*@
}
else if (_connectionState == ConnectionStates.Connecting)
{
    <p>Verbindung wird hergestellt.</p>
}
else if (_connectionState == ConnectionStates.CantReachServer)
{
    <p>Server nicht erreichbar.</p>
}


    <MUNityClient.Shared.Bootstrap.Modal Title="Passwort Eingeben" @ref="this._passwordModal"
                                         OnSubmitCallback="JoinSimulation">
        <EditForm Model="_joinForm" OnSubmit="JoinSimulation">
            <div class="form-group">
                <label>Anzeigename</label>
                <InputText @bind-Value="_joinForm.DisplayName" class="form-control"></InputText>
            </div>
            @if (this._selectedSimulation != null && _selectedSimulation.UsingPassword)
            {
                <div class="form-group">
                    <label>Passwort</label>
                    <InputText @bind-Value="_joinForm.Password" class="form-control" type="password"></InputText>
                </div>
            }
        </EditForm>
    </MUNityClient.Shared.Bootstrap.Modal>



<MUNityClient.Shared.Bootstrap.Modal Title="Simulation erstellt" @ref="_pinModal"
                                     OnSubmitCallback="RootToSimulation">
    <h3>Hey, Ihr Pin ist</h3>
    <h4>@_pin</h4>
    <small>Diesen Pin am Besten irgendwo notieren. Wir speichern einen Sicherheitsschlüssel in Ihrem Browser zwischen. Geht dieser verloren wird der Pin benötigt, damit Sie sich wieder in diese Simulation einwählen können.</small>
</MUNityClient.Shared.Bootstrap.Modal>

<MUNityClient.Shared.Bootstrap.Modal Title="Simulation Beitreten" @ref="_pinModal"
                                     OnSubmitCallback="RootToSimulation">
    <EditForm Model="@_joinForm">
        <div class="form-group">
            <label>Benutzer Kennung</label>
            <InputText @bind-Value="_joinForm.UserId" class="form-control"/>
        </div>
        <div class="form-group">
            <label>Kennung</label>
            <InputText @bind-Value="_joinForm.Password" class="form-control" type="password" />
        </div>
        <!-- Theoretisch könnte man noch den Display Name als einstellbare Funtion stellen. -->
    </EditForm>
</MUNityClient.Shared.Bootstrap.Modal>

@code {

    private enum ConnectionStates
    {
        Connecting,
        Connected,
        CantReachServer
    }

    private MUNityClient.Shared.Bootstrap.Modal _passwordModal;

    private ConnectionStates _connectionState { get; set; } = ConnectionStates.Connecting;

    private ICollection<MUNity.Schema.Simulation.SimulationTokenResponse> _tokens { get; set; }

    private ICollection<MUNity.Schema.Simulation.SimulationListItem> _simulations { get; set; }

    private MUNity.Schema.Simulation.SimulationListItem _selectedSimulation;

    private MUNity.Schema.Simulation.JoinAuthenticate _joinForm = new MUNity.Schema.Simulation.JoinAuthenticate();

    private MUNityClient.Shared.Bootstrap.Modal _pinModal;

    private string _pin;

    private void EnterSimulation(int id)
    {
        var fittingToken = _tokens?.FirstOrDefault(n => n.SimulationId == id);
        if (fittingToken == null)
        {
            this._selectedSimulation = this._simulations.FirstOrDefault(n => n.SimulationId == id);
            if (_selectedSimulation != null)
            {
                // Draw the Modal
                this.StateHasChanged();
                _joinForm.SimulationId = id;
                // Aks for password
                _passwordModal.Open();
            }
        }
        else
        {
            // TODO: Zustand anfragen und dann entweder in die Lobby oder direkt ins Game!
            navigation.NavigateTo($"/sim/lobby/{id}");
        }
    }

    private async Task JoinSimulation()
    {
        var pinToken = await this.simulationService.JoinSimulation(_joinForm);
        _passwordModal.Close();
        this._pin = pinToken.Pin;
        this._pinModal.Open();

    }

    private void RootToSimulation()
    {
        this._pinModal.Close();
        this.navigation.NavigateTo($"/sim/lobby/{_selectedSimulation.SimulationId}");
    }

    protected async override Task OnInitializedAsync()
    {
        var serverOnline = await this.simulationService.IsOnline();
        this._connectionState = (serverOnline) ? ConnectionStates.Connected : ConnectionStates.CantReachServer;

        if (serverOnline)
        {
            _tokens = await simulationService.GetStoredTokens();
            _simulations = await simulationService.GetSimulationList();
        }
    }
}
