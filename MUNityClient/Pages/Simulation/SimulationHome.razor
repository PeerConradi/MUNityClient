@page "/sim/home"

@inject Services.SimulationService simulationService;
@inject NavigationManager navigation;

@if (ConntectionState == ConnectionStates.Connected)
{
    @* Erstellen *@
    <MUNityClient.Shared.VirtualCommittee.CreateVirtualCommittee></MUNityClient.Shared.VirtualCommittee.CreateVirtualCommittee>

    <h1>Simulationen</h1>
    @if (Simulations != null)
    {
        if (Simulations.Any())
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Mit Passwort</th>
                        <th>Status/Phase</th>
                        <th>Beitreten</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var simulation in this.Simulations)
                    {
                        <tr>
                            <td>@simulation.Name</td>
                            <td>@simulation.UsingPassword.ToString()</td>

                            @if (simulation.Phase == Models.Simulation.Simulation.GamePhases.Lobby)
                            {
                                <td>Vorbereitungsphase</td>
                                <td><button class="btn btn-small btn-success">Beitreten</button></td>
                            }
                            else if (simulation.Phase == Models.Simulation.Simulation.GamePhases.Online)
                            {
                                <td>Aktiv</td>
                                <td><button class="btn btn-small btn-success">Beitreten</button></td>
                            }
                            else if (simulation.Phase == Models.Simulation.Simulation.GamePhases.Offline)
                            {
                                <td>Offline</td>
                                <td><button class="btn btn-small btn-info">Einleiten</button></td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Keine Simulationen gefunden :(</p>
        }
    }

    @* Simulationen aus den Tokens *@

    @if (Tokens != null)
    {
        <h1>Gespeicherte Sessions</h1>
        <div class="row">
            <div class="col-12">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Beitreten</th>
                            <th>Entfernen</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var token in Tokens)
                        {
                            <tr>
                                <td>@token.Name</td>
                                <td><button class="btn btn-small btn-success" @onclick="() => EnterSimulation(token.SimulationId)">Beitreten</button></td>
                                <td><button class="btn btn-small btn-danger">Entfernen</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
}
else if (ConntectionState == ConnectionStates.Connecting)
{
    <p>Verbindung wird hergestellt.</p>
}
else if (ConntectionState == ConnectionStates.CantReachServer)
{
    <p>Server nicht erreichbar.</p>
}




@* TODO: An dieser Stelle könnte ein Lobby Browser erscheinen*@

@* TODO: Sollte es einen Lobby Browser geben muss bei der Auswahl hier eine Abfrage sein mit welchem Namen man
    beitreten möchte, sofern kein Token gespeichert ist. Ist ein Token gespeichert kann man beitreten.
*@

@code {

    private enum ConnectionStates
    {
        Connecting,
        Connected,
        CantReachServer
    }

    private ConnectionStates ConntectionState { get; set; } = ConnectionStates.Connecting;

    private ICollection<Models.Simulation.SimulationToken> Tokens { get; set; }

    private ICollection<Models.Simulation.SimulationListItem> Simulations { get; set; }

    private void EnterSimulation(int id)
    {
        // TODO: Zustand anfragen und dann entweder in die Lobby oder direkt ins Game!
        navigation.NavigateTo($"/sim/lobby/{id}");
    }

    protected async override Task OnInitializedAsync()
    {
        var serverOnline = await this.simulationService.IsOnline();
        this.ConntectionState = (serverOnline) ? ConnectionStates.Connected : ConnectionStates.CantReachServer;

        if (serverOnline)
        {
            Tokens = await simulationService.GetStoredTokens();
            Simulations = await simulationService.GetSimulationList();
        }
    }
}
