@page "/sim/home"

@inject Services.SimulationService simulationService;
@inject NavigationManager navigation;

@inject IJSRuntime JSRuntime

@if (_connectionState == ConnectionStates.Connected)
{
    @* Erstellen *@
    <div class="row col-12 m-0 py-0 px-4">
        <div class="col-4">
            <div class="card">
                <div class="card-body">
                    <MUNityClient.Shared.VirtualCommittee.CreateVirtualCommittee></MUNityClient.Shared.VirtualCommittee.CreateVirtualCommittee>
                </div>
            </div>
        </div>
        <div class="col-8">
            <div class="card">
                <div class="card-header">
                    Simulationen
                </div>
                <div class="card-body">
                    @if (_simulations != null)
                    {
                        if (_simulations.Any())
                        {
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th class="text-center">Passwort</th>
                                        <th>Status</th>
                                        <th class="text-center">Beitreten</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var simulation in this._simulations)
                                    {
                                    <tr>
                                        <td>@simulation.Name</td>
                                        <td class="text-center">
                                            @if(simulation.UsingPassword)
                                            {
                                            <i class="fas fa-check text-success"></i>
                                            } else {
                                            <i class="fas fa-times text-danger"></i>
                                            }
                                        </td>

                                        @if (simulation.Phase == MUNity.Schema.Simulation.SimulationEnums.GamePhases.Lobby)
                                        {
                                            <td>Vorbereitung</td>
                                        }
                                        else if (simulation.Phase == MUNity.Schema.Simulation.SimulationEnums.GamePhases.Online)
                                        {
                                            <td class="text-success">Aktiv</td>
                                        }
                                        else if (simulation.Phase == MUNity.Schema.Simulation.SimulationEnums.GamePhases.Offline)
                                        {
                                            <td>Offline</td>
                                        }
                                        @if (_tokens != null && _tokens.Any(n => n.SimulationId == simulation.SimulationId))
                                        {
                                            <td class="text-center">
                                            <i type="button" class="fas fa-2x mr-3 fa-sign-in-alt text-success" title="Simulation beitreten" @onclick="() => EnterSimulation(simulation.SimulationId)"></i>
                                            <i type="button" class="fas fa-2x fa-sign-out-alt text-danger" title="Zugangsdaten löschen und Simulation verlassen" @onclick="() => DeleteToken(simulation.SimulationId)"></i>
                                            </td>
                                        }
                                        else
                                        {
                                            <td class="text-center"><i type="button" class="fas fa-2x mr-3 fa-sign-in-alt text-success" title="Simulation beitreten" @onclick="() => EnterSimulation(simulation.SimulationId)"></i></td>
                                        }

                                        <td class="text-right"><i type="button" class="fas fa-lg fa-tools" title="Beitritt mit dem Admin Passwort"></i></td>
                                    </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p>Keine Simulationen gefunden :(</p>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}
else if (_connectionState == ConnectionStates.Connecting)
{
    <div class="row d-flex w-100 justify-content-center mt-5">
        <div class="d-flex w-100 justify-content-center">
            <div class="spinner-border text-primary p-4" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div class="d-flex justify-content-center mt-3">
            Es wird versucht eine Verbindung zum Server herzustellen...
        </div>
    </div>
}
else if (_connectionState == ConnectionStates.CantReachServer)
{
    <div class="row col-12 d-flex justify-content-center my-2 align-items-center">
        <div class="d-flex align-items-center text-danger">
            <i class="fas fa-exclamation mr-2"></i> Die Verbindung zum Server konnte nicht hergestellt werden.
        </div>
    </div>
}


    <MUNityClient.Shared.Bootstrap.Modal Title="Simulation Betreten" @ref="this._passwordModal"
                                         OnSubmitCallback="JoinSimulation">
        <EditForm Model="_joinForm" OnSubmit="JoinSimulation">
            <div class="form-group">
                <label>Anzeigename</label>
                <InputText @bind-Value="_joinForm.DisplayName" class="form-control"></InputText>
            </div>
            <div class="form-group">
                <label>Kennung</label>
                <InputText @bind-Value="_joinForm.UserId" class="form-control"></InputText>
            </div>
            <div class="form-group">
                <label>Passwort</label>
                <InputText @bind-Value="_joinForm.Password" class="form-control" type="password"></InputText>
            </div>
            <div class="form-group">
                <input type="submit" class="btn btn-success" value="Beitreten" />
            </div>
        </EditForm>
    </MUNityClient.Shared.Bootstrap.Modal>



<MUNityClient.Shared.Bootstrap.Modal Title="Simulation erstellt" @ref="_pinModal"
                                     OnSubmitCallback="RootToSimulation">

    <p>Erstellt</p>


</MUNityClient.Shared.Bootstrap.Modal>

@code {

    private enum ConnectionStates
    {
        Connecting,
        Connected,
        CantReachServer
    }

    private MUNityClient.Shared.Bootstrap.Modal _passwordModal;

    private ConnectionStates _connectionState { get; set; } = ConnectionStates.Connecting;

    private ICollection<MUNity.Schema.Simulation.SimulationTokenResponse> _tokens { get; set; }

    private ICollection<MUNity.Schema.Simulation.SimulationListItem> _simulations { get; set; }

    private MUNity.Schema.Simulation.SimulationListItem _selectedSimulation;

    private MUNity.Schema.Simulation.JoinAuthenticate _joinForm = new MUNity.Schema.Simulation.JoinAuthenticate();

    private MUNityClient.Shared.Bootstrap.Modal _pinModal;

    private string _pin;

    private async Task CopyTextToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", _pin);
    }

    private void EnterSimulation(int id)
    {
        _joinForm.SimulationId = id;
        var fittingToken = _tokens?.FirstOrDefault(n => n.SimulationId == id);
        if (fittingToken == null)
        {
            this._selectedSimulation = this._simulations.FirstOrDefault(n => n.SimulationId == id);
            if (_selectedSimulation != null)
            {
                // Draw the Modal
                this.StateHasChanged();
                _joinForm.SimulationId = id;
                // Aks for password
                _passwordModal.Open();
            }
        }
        else
        {
            // TODO: Zustand anfragen und dann entweder in die Lobby oder direkt ins Game!
            navigation.NavigateTo($"/sim/lobby/{id}");
        }
    }

    private async Task DeleteToken(int id)
    {
        await this.simulationService.RemoveToken(id);
        var token = _tokens.FirstOrDefault(n => n.SimulationId == id);
        if (token != null) _tokens.Remove(token);
    }

    private async Task JoinSimulation()
    {
        _passwordModal.Close();
        var pinToken = await this.simulationService.JoinSimulation(_joinForm);
        if (pinToken != null)
        {
            if (this._tokens == null)
                this._tokens = new List<MUNity.Schema.Simulation.SimulationTokenResponse>();
            this._tokens.Add(pinToken);
            this.StateHasChanged();
        }
        else
        {
            // TODO: Beitritt verweigert Meldung!
        }
        //this.navigation.NavigateTo($"/sim/lobby/{_selectedSimulation.SimulationId}");


    }

    private void RootToSimulation()
    {
        this._pinModal.Close();
        this.navigation.NavigateTo($"/sim/lobby/{_selectedSimulation.SimulationId}");
    }

    protected async override Task OnInitializedAsync()
    {
        var serverOnline = await this.simulationService.IsOnline();
        this._connectionState = (serverOnline) ? ConnectionStates.Connected : ConnectionStates.CantReachServer;

        if (serverOnline)
        {
            _tokens = await simulationService.GetStoredTokens();
            _simulations = await simulationService.GetSimulationList();
        }
    }
}
